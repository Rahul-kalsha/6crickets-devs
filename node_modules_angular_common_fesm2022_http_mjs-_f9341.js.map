{"version":3,"file":"node_modules_angular_common_fesm2022_http_mjs-_f9341.js","mappings":"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","sources":["./node_modules/rxjs/dist/esm/internal/operators/concatMap.js","./node_modules/rxjs/dist/esm/internal/operators/filter.js","./node_modules/rxjs/dist/esm/internal/operators/finalize.js","./node_modules/rxjs/dist/esm/internal/operators/map.js","./node_modules/rxjs/dist/esm/internal/operators/mergeInternals.js","./node_modules/rxjs/dist/esm/internal/operators/mergeMap.js","./node_modules/rxjs/dist/esm/internal/operators/switchMap.js","./node_modules/rxjs/dist/esm/internal/operators/tap.js","./node_modules/@angular/common/fesm2022/http.mjs","./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import { mergeMap } from './mergeMap';\nimport { isFunction } from '../util/isFunction';\nexport function concatMap(project, resultSelector) {\n    return isFunction(resultSelector) ? mergeMap(project, resultSelector, 1) : mergeMap(project, 1);\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function filter(predicate, thisArg) {\n    return operate((source, subscriber) => {\n        let index = 0;\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => predicate.call(thisArg, value, index++) && subscriber.next(value)));\n    });\n}\n","import { operate } from '../util/lift';\nexport function finalize(callback) {\n    return operate((source, subscriber) => {\n        try {\n            source.subscribe(subscriber);\n        }\n        finally {\n            subscriber.add(callback);\n        }\n    });\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function map(project, thisArg) {\n    return operate((source, subscriber) => {\n        let index = 0;\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            subscriber.next(project.call(thisArg, value, index++));\n        }));\n    });\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { executeSchedule } from '../util/executeSchedule';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalFinalizer) {\n    const buffer = [];\n    let active = 0;\n    let index = 0;\n    let isComplete = false;\n    const checkComplete = () => {\n        if (isComplete && !buffer.length && !active) {\n            subscriber.complete();\n        }\n    };\n    const outerNext = (value) => (active < concurrent ? doInnerSub(value) : buffer.push(value));\n    const doInnerSub = (value) => {\n        expand && subscriber.next(value);\n        active++;\n        let innerComplete = false;\n        innerFrom(project(value, index++)).subscribe(createOperatorSubscriber(subscriber, (innerValue) => {\n            onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);\n            if (expand) {\n                outerNext(innerValue);\n            }\n            else {\n                subscriber.next(innerValue);\n            }\n        }, () => {\n            innerComplete = true;\n        }, undefined, () => {\n            if (innerComplete) {\n                try {\n                    active--;\n                    while (buffer.length && active < concurrent) {\n                        const bufferedValue = buffer.shift();\n                        if (innerSubScheduler) {\n                            executeSchedule(subscriber, innerSubScheduler, () => doInnerSub(bufferedValue));\n                        }\n                        else {\n                            doInnerSub(bufferedValue);\n                        }\n                    }\n                    checkComplete();\n                }\n                catch (err) {\n                    subscriber.error(err);\n                }\n            }\n        }));\n    };\n    source.subscribe(createOperatorSubscriber(subscriber, outerNext, () => {\n        isComplete = true;\n        checkComplete();\n    }));\n    return () => {\n        additionalFinalizer === null || additionalFinalizer === void 0 ? void 0 : additionalFinalizer();\n    };\n}\n","import { map } from './map';\nimport { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { mergeInternals } from './mergeInternals';\nimport { isFunction } from '../util/isFunction';\nexport function mergeMap(project, resultSelector, concurrent = Infinity) {\n    if (isFunction(resultSelector)) {\n        return mergeMap((a, i) => map((b, ii) => resultSelector(a, b, i, ii))(innerFrom(project(a, i))), concurrent);\n    }\n    else if (typeof resultSelector === 'number') {\n        concurrent = resultSelector;\n    }\n    return operate((source, subscriber) => mergeInternals(source, subscriber, project, concurrent));\n}\n","import { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function switchMap(project, resultSelector) {\n    return operate((source, subscriber) => {\n        let innerSubscriber = null;\n        let index = 0;\n        let isComplete = false;\n        const checkComplete = () => isComplete && !innerSubscriber && subscriber.complete();\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();\n            let innerIndex = 0;\n            const outerIndex = index++;\n            innerFrom(project(value, outerIndex)).subscribe((innerSubscriber = createOperatorSubscriber(subscriber, (innerValue) => subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue), () => {\n                innerSubscriber = null;\n                checkComplete();\n            })));\n        }, () => {\n            isComplete = true;\n            checkComplete();\n        }));\n    });\n}\n","import { isFunction } from '../util/isFunction';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { identity } from '../util/identity';\nexport function tap(observerOrNext, error, complete) {\n    const tapObserver = isFunction(observerOrNext) || error || complete\n        ?\n            { next: observerOrNext, error, complete }\n        : observerOrNext;\n    return tapObserver\n        ? operate((source, subscriber) => {\n            var _a;\n            (_a = tapObserver.subscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);\n            let isUnsub = true;\n            source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n                var _a;\n                (_a = tapObserver.next) === null || _a === void 0 ? void 0 : _a.call(tapObserver, value);\n                subscriber.next(value);\n            }, () => {\n                var _a;\n                isUnsub = false;\n                (_a = tapObserver.complete) === null || _a === void 0 ? void 0 : _a.call(tapObserver);\n                subscriber.complete();\n            }, (err) => {\n                var _a;\n                isUnsub = false;\n                (_a = tapObserver.error) === null || _a === void 0 ? void 0 : _a.call(tapObserver, err);\n                subscriber.error(err);\n            }, () => {\n                var _a, _b;\n                if (isUnsub) {\n                    (_a = tapObserver.unsubscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);\n                }\n                (_b = tapObserver.finalize) === null || _b === void 0 ? void 0 : _b.call(tapObserver);\n            }));\n        })\n        :\n            identity;\n}\n","/**\n * @license Angular v18.2.8\n * (c) 2010-2024 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport * as i0 from '@angular/core';\nimport { Injectable, inject, NgZone, runInInjectionContext, InjectionToken, ɵPendingTasks, PLATFORM_ID, ɵConsole, ɵformatRuntimeError, Inject, ɵRuntimeError, makeEnvironmentProviders, NgModule, TransferState, makeStateKey, ɵperformanceMarkFeature, APP_BOOTSTRAP_LISTENER, ApplicationRef, ɵwhenStable, ɵtruncateMiddle } from '@angular/core';\nimport { of, Observable, from } from 'rxjs';\nimport { concatMap, filter, map, finalize, switchMap, tap } from 'rxjs/operators';\nimport * as i1 from '@angular/common';\nimport { isPlatformServer, DOCUMENT, ɵparseCookieValue } from '@angular/common';\n\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\nclass HttpHandler {\n}\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\nclass HttpBackend {\n}\n\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @publicApi\n */\nclass HttpHeaders {\n    /**  Constructs a new HTTP header object with the given values.*/\n    constructor(headers) {\n        /**\n         * Internal map of lowercased header names to the normalized\n         * form of the name (the form seen first).\n         */\n        this.normalizedNames = new Map();\n        /**\n         * Queued updates to be materialized the next initialization.\n         */\n        this.lazyUpdate = null;\n        if (!headers) {\n            this.headers = new Map();\n        }\n        else if (typeof headers === 'string') {\n            this.lazyInit = () => {\n                this.headers = new Map();\n                headers.split('\\n').forEach((line) => {\n                    const index = line.indexOf(':');\n                    if (index > 0) {\n                        const name = line.slice(0, index);\n                        const key = name.toLowerCase();\n                        const value = line.slice(index + 1).trim();\n                        this.maybeSetNormalizedName(name, key);\n                        if (this.headers.has(key)) {\n                            this.headers.get(key).push(value);\n                        }\n                        else {\n                            this.headers.set(key, [value]);\n                        }\n                    }\n                });\n            };\n        }\n        else if (typeof Headers !== 'undefined' && headers instanceof Headers) {\n            this.headers = new Map();\n            headers.forEach((values, name) => {\n                this.setHeaderEntries(name, values);\n            });\n        }\n        else {\n            this.lazyInit = () => {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    assertValidHeaders(headers);\n                }\n                this.headers = new Map();\n                Object.entries(headers).forEach(([name, values]) => {\n                    this.setHeaderEntries(name, values);\n                });\n            };\n        }\n    }\n    /**\n     * Checks for existence of a given header.\n     *\n     * @param name The header name to check for existence.\n     *\n     * @returns True if the header exists, false otherwise.\n     */\n    has(name) {\n        this.init();\n        return this.headers.has(name.toLowerCase());\n    }\n    /**\n     * Retrieves the first value of a given header.\n     *\n     * @param name The header name.\n     *\n     * @returns The value string if the header exists, null otherwise\n     */\n    get(name) {\n        this.init();\n        const values = this.headers.get(name.toLowerCase());\n        return values && values.length > 0 ? values[0] : null;\n    }\n    /**\n     * Retrieves the names of the headers.\n     *\n     * @returns A list of header names.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.normalizedNames.values());\n    }\n    /**\n     * Retrieves a list of values for a given header.\n     *\n     * @param name The header name from which to retrieve values.\n     *\n     * @returns A string of values if the header exists, null otherwise.\n     */\n    getAll(name) {\n        this.init();\n        return this.headers.get(name.toLowerCase()) || null;\n    }\n    /**\n     * Appends a new value to the existing set of values for a header\n     * and returns them in a clone of the original instance.\n     *\n     * @param name The header name for which to append the values.\n     * @param value The value to append.\n     *\n     * @returns A clone of the HTTP headers object with the value appended to the given header.\n     */\n    append(name, value) {\n        return this.clone({ name, value, op: 'a' });\n    }\n    /**\n     * Sets or modifies a value for a given header in a clone of the original instance.\n     * If the header already exists, its value is replaced with the given value\n     * in the returned object.\n     *\n     * @param name The header name.\n     * @param value The value or values to set or override for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the newly set header value.\n     */\n    set(name, value) {\n        return this.clone({ name, value, op: 's' });\n    }\n    /**\n     * Deletes values for a given header in a clone of the original instance.\n     *\n     * @param name The header name.\n     * @param value The value or values to delete for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the given value deleted.\n     */\n    delete(name, value) {\n        return this.clone({ name, value, op: 'd' });\n    }\n    maybeSetNormalizedName(name, lcName) {\n        if (!this.normalizedNames.has(lcName)) {\n            this.normalizedNames.set(lcName, name);\n        }\n    }\n    init() {\n        if (!!this.lazyInit) {\n            if (this.lazyInit instanceof HttpHeaders) {\n                this.copyFrom(this.lazyInit);\n            }\n            else {\n                this.lazyInit();\n            }\n            this.lazyInit = null;\n            if (!!this.lazyUpdate) {\n                this.lazyUpdate.forEach((update) => this.applyUpdate(update));\n                this.lazyUpdate = null;\n            }\n        }\n    }\n    copyFrom(other) {\n        other.init();\n        Array.from(other.headers.keys()).forEach((key) => {\n            this.headers.set(key, other.headers.get(key));\n            this.normalizedNames.set(key, other.normalizedNames.get(key));\n        });\n    }\n    clone(update) {\n        const clone = new HttpHeaders();\n        clone.lazyInit = !!this.lazyInit && this.lazyInit instanceof HttpHeaders ? this.lazyInit : this;\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n        return clone;\n    }\n    applyUpdate(update) {\n        const key = update.name.toLowerCase();\n        switch (update.op) {\n            case 'a':\n            case 's':\n                let value = update.value;\n                if (typeof value === 'string') {\n                    value = [value];\n                }\n                if (value.length === 0) {\n                    return;\n                }\n                this.maybeSetNormalizedName(update.name, key);\n                const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n                base.push(...value);\n                this.headers.set(key, base);\n                break;\n            case 'd':\n                const toDelete = update.value;\n                if (!toDelete) {\n                    this.headers.delete(key);\n                    this.normalizedNames.delete(key);\n                }\n                else {\n                    let existing = this.headers.get(key);\n                    if (!existing) {\n                        return;\n                    }\n                    existing = existing.filter((value) => toDelete.indexOf(value) === -1);\n                    if (existing.length === 0) {\n                        this.headers.delete(key);\n                        this.normalizedNames.delete(key);\n                    }\n                    else {\n                        this.headers.set(key, existing);\n                    }\n                }\n                break;\n        }\n    }\n    setHeaderEntries(name, values) {\n        const headerValues = (Array.isArray(values) ? values : [values]).map((value) => value.toString());\n        const key = name.toLowerCase();\n        this.headers.set(key, headerValues);\n        this.maybeSetNormalizedName(name, key);\n    }\n    /**\n     * @internal\n     */\n    forEach(fn) {\n        this.init();\n        Array.from(this.normalizedNames.keys()).forEach((key) => fn(this.normalizedNames.get(key), this.headers.get(key)));\n    }\n}\n/**\n * Verifies that the headers object has the right shape: the values\n * must be either strings, numbers or arrays. Throws an error if an invalid\n * header value is present.\n */\nfunction assertValidHeaders(headers) {\n    for (const [key, value] of Object.entries(headers)) {\n        if (!(typeof value === 'string' || typeof value === 'number') && !Array.isArray(value)) {\n            throw new Error(`Unexpected value of the \\`${key}\\` header provided. ` +\n                `Expecting either a string, a number or an array, but got: \\`${value}\\`.`);\n        }\n    }\n}\n\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * @publicApi\n */\nclass HttpUrlEncodingCodec {\n    /**\n     * Encodes a key name for a URL parameter or query-string.\n     * @param key The key name.\n     * @returns The encoded key name.\n     */\n    encodeKey(key) {\n        return standardEncoding(key);\n    }\n    /**\n     * Encodes the value of a URL parameter or query-string.\n     * @param value The value.\n     * @returns The encoded value.\n     */\n    encodeValue(value) {\n        return standardEncoding(value);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string key.\n     * @param key The encoded key name.\n     * @returns The decoded key name.\n     */\n    decodeKey(key) {\n        return decodeURIComponent(key);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string value.\n     * @param value The encoded value.\n     * @returns The decoded value.\n     */\n    decodeValue(value) {\n        return decodeURIComponent(value);\n    }\n}\nfunction paramParser(rawParams, codec) {\n    const map = new Map();\n    if (rawParams.length > 0) {\n        // The `window.location.search` can be used while creating an instance of the `HttpParams` class\n        // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\n        // may start with the `?` char, so we strip it if it's present.\n        const params = rawParams.replace(/^\\?/, '').split('&');\n        params.forEach((param) => {\n            const eqIdx = param.indexOf('=');\n            const [key, val] = eqIdx == -1\n                ? [codec.decodeKey(param), '']\n                : [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n            const list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        });\n    }\n    return map;\n}\n/**\n * Encode input string with standard encodeURIComponent and then un-encode specific characters.\n */\nconst STANDARD_ENCODING_REGEX = /%(\\d[a-f0-9])/gi;\nconst STANDARD_ENCODING_REPLACEMENTS = {\n    '40': '@',\n    '3A': ':',\n    '24': '$',\n    '2C': ',',\n    '3B': ';',\n    '3D': '=',\n    '3F': '?',\n    '2F': '/',\n};\nfunction standardEncoding(v) {\n    return encodeURIComponent(v).replace(STANDARD_ENCODING_REGEX, (s, t) => STANDARD_ENCODING_REPLACEMENTS[t] ?? s);\n}\nfunction valueToString(value) {\n    return `${value}`;\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * @publicApi\n */\nclass HttpParams {\n    constructor(options = {}) {\n        this.updates = null;\n        this.cloneFrom = null;\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\n        if (!!options.fromString) {\n            if (!!options.fromObject) {\n                throw new Error(`Cannot specify both fromString and fromObject.`);\n            }\n            this.map = paramParser(options.fromString, this.encoder);\n        }\n        else if (!!options.fromObject) {\n            this.map = new Map();\n            Object.keys(options.fromObject).forEach((key) => {\n                const value = options.fromObject[key];\n                // convert the values to strings\n                const values = Array.isArray(value) ? value.map(valueToString) : [valueToString(value)];\n                this.map.set(key, values);\n            });\n        }\n        else {\n            this.map = null;\n        }\n    }\n    /**\n     * Reports whether the body includes one or more values for a given parameter.\n     * @param param The parameter name.\n     * @returns True if the parameter has one or more values,\n     * false if it has no value or is not present.\n     */\n    has(param) {\n        this.init();\n        return this.map.has(param);\n    }\n    /**\n     * Retrieves the first value for a parameter.\n     * @param param The parameter name.\n     * @returns The first value of the given parameter,\n     * or `null` if the parameter is not present.\n     */\n    get(param) {\n        this.init();\n        const res = this.map.get(param);\n        return !!res ? res[0] : null;\n    }\n    /**\n     * Retrieves all values for a  parameter.\n     * @param param The parameter name.\n     * @returns All values in a string array,\n     * or `null` if the parameter not present.\n     */\n    getAll(param) {\n        this.init();\n        return this.map.get(param) || null;\n    }\n    /**\n     * Retrieves all the parameters for this body.\n     * @returns The parameter names in a string array.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.map.keys());\n    }\n    /**\n     * Appends a new value to existing values for a parameter.\n     * @param param The parameter name.\n     * @param value The new value to add.\n     * @return A new body with the appended value.\n     */\n    append(param, value) {\n        return this.clone({ param, value, op: 'a' });\n    }\n    /**\n     * Constructs a new body with appended values for the given parameter name.\n     * @param params parameters and values\n     * @return A new body with the new value.\n     */\n    appendAll(params) {\n        const updates = [];\n        Object.keys(params).forEach((param) => {\n            const value = params[param];\n            if (Array.isArray(value)) {\n                value.forEach((_value) => {\n                    updates.push({ param, value: _value, op: 'a' });\n                });\n            }\n            else {\n                updates.push({ param, value: value, op: 'a' });\n            }\n        });\n        return this.clone(updates);\n    }\n    /**\n     * Replaces the value for a parameter.\n     * @param param The parameter name.\n     * @param value The new value.\n     * @return A new body with the new value.\n     */\n    set(param, value) {\n        return this.clone({ param, value, op: 's' });\n    }\n    /**\n     * Removes a given value or all values from a parameter.\n     * @param param The parameter name.\n     * @param value The value to remove, if provided.\n     * @return A new body with the given value removed, or with all values\n     * removed if no value is specified.\n     */\n    delete(param, value) {\n        return this.clone({ param, value, op: 'd' });\n    }\n    /**\n     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     */\n    toString() {\n        this.init();\n        return (this.keys()\n            .map((key) => {\n            const eKey = this.encoder.encodeKey(key);\n            // `a: ['1']` produces `'a=1'`\n            // `b: []` produces `''`\n            // `c: ['1', '2']` produces `'c=1&c=2'`\n            return this.map.get(key)\n                .map((value) => eKey + '=' + this.encoder.encodeValue(value))\n                .join('&');\n        })\n            // filter out empty values because `b: []` produces `''`\n            // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n            .filter((param) => param !== '')\n            .join('&'));\n    }\n    clone(update) {\n        const clone = new HttpParams({ encoder: this.encoder });\n        clone.cloneFrom = this.cloneFrom || this;\n        clone.updates = (this.updates || []).concat(update);\n        return clone;\n    }\n    init() {\n        if (this.map === null) {\n            this.map = new Map();\n        }\n        if (this.cloneFrom !== null) {\n            this.cloneFrom.init();\n            this.cloneFrom.keys().forEach((key) => this.map.set(key, this.cloneFrom.map.get(key)));\n            this.updates.forEach((update) => {\n                switch (update.op) {\n                    case 'a':\n                    case 's':\n                        const base = (update.op === 'a' ? this.map.get(update.param) : undefined) || [];\n                        base.push(valueToString(update.value));\n                        this.map.set(update.param, base);\n                        break;\n                    case 'd':\n                        if (update.value !== undefined) {\n                            let base = this.map.get(update.param) || [];\n                            const idx = base.indexOf(valueToString(update.value));\n                            if (idx !== -1) {\n                                base.splice(idx, 1);\n                            }\n                            if (base.length > 0) {\n                                this.map.set(update.param, base);\n                            }\n                            else {\n                                this.map.delete(update.param);\n                            }\n                        }\n                        else {\n                            this.map.delete(update.param);\n                            break;\n                        }\n                }\n            });\n            this.cloneFrom = this.updates = null;\n        }\n    }\n}\n\n/**\n * A token used to manipulate and access values stored in `HttpContext`.\n *\n * @publicApi\n */\nclass HttpContextToken {\n    constructor(defaultValue) {\n        this.defaultValue = defaultValue;\n    }\n}\n/**\n * Http context stores arbitrary user defined values and ensures type safety without\n * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.\n *\n * This context is mutable and is shared between cloned requests unless explicitly specified.\n *\n * @usageNotes\n *\n * ### Usage Example\n *\n * ```typescript\n * // inside cache.interceptors.ts\n * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);\n *\n * export class CacheInterceptor implements HttpInterceptor {\n *\n *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {\n *     if (req.context.get(IS_CACHE_ENABLED) === true) {\n *       return ...;\n *     }\n *     return delegate.handle(req);\n *   }\n * }\n *\n * // inside a service\n *\n * this.httpClient.get('/api/weather', {\n *   context: new HttpContext().set(IS_CACHE_ENABLED, true)\n * }).subscribe(...);\n * ```\n *\n * @publicApi\n */\nclass HttpContext {\n    constructor() {\n        this.map = new Map();\n    }\n    /**\n     * Store a value in the context. If a value is already present it will be overwritten.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     * @param value The value to store.\n     *\n     * @returns A reference to itself for easy chaining.\n     */\n    set(token, value) {\n        this.map.set(token, value);\n        return this;\n    }\n    /**\n     * Retrieve the value associated with the given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns The stored value or default if one is defined.\n     */\n    get(token) {\n        if (!this.map.has(token)) {\n            this.map.set(token, token.defaultValue());\n        }\n        return this.map.get(token);\n    }\n    /**\n     * Delete the value associated with the given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns A reference to itself for easy chaining.\n     */\n    delete(token) {\n        this.map.delete(token);\n        return this;\n    }\n    /**\n     * Checks for existence of a given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns True if the token exists, false otherwise.\n     */\n    has(token) {\n        return this.map.has(token);\n    }\n    /**\n     * @returns a list of tokens currently stored in the context.\n     */\n    keys() {\n        return this.map.keys();\n    }\n}\n\n/**\n * Determine whether the given HTTP method may include a body.\n */\nfunction mightHaveBody(method) {\n    switch (method) {\n        case 'DELETE':\n        case 'GET':\n        case 'HEAD':\n        case 'OPTIONS':\n        case 'JSONP':\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\nfunction isArrayBuffer(value) {\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\nfunction isBlob(value) {\n    return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\nfunction isFormData(value) {\n    return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * Safely assert whether the given value is a URLSearchParams instance.\n *\n * In some execution environments URLSearchParams is not defined.\n */\nfunction isUrlSearchParams(value) {\n    return typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\nclass HttpRequest {\n    constructor(method, url, third, fourth) {\n        this.url = url;\n        /**\n         * The request body, or `null` if one isn't set.\n         *\n         * Bodies are not enforced to be immutable, as they can include a reference to any\n         * user-defined data type. However, interceptors should take care to preserve\n         * idempotence by treating them as such.\n         */\n        this.body = null;\n        /**\n         * Whether this request should be made in a way that exposes progress events.\n         *\n         * Progress events are expensive (change detection runs on each event) and so\n         * they should only be requested if the consumer intends to monitor them.\n         *\n         * Note: The `FetchBackend` doesn't support progress report on uploads.\n         */\n        this.reportProgress = false;\n        /**\n         * Whether this request should be sent with outgoing credentials (cookies).\n         */\n        this.withCredentials = false;\n        /**\n         * The expected response type of the server.\n         *\n         * This is used to parse the response appropriately before returning it to\n         * the requestee.\n         */\n        this.responseType = 'json';\n        this.method = method.toUpperCase();\n        // Next, need to figure out which argument holds the HttpRequestInit\n        // options, if any.\n        let options;\n        // Check whether a body argument is expected. The only valid way to omit\n        // the body argument is to use a known no-body method like GET.\n        if (mightHaveBody(this.method) || !!fourth) {\n            // Body is the third argument, options are the fourth.\n            this.body = third !== undefined ? third : null;\n            options = fourth;\n        }\n        else {\n            // No body required, options are the third argument. The body stays null.\n            options = third;\n        }\n        // If options have been passed, interpret them.\n        if (options) {\n            // Normalize reportProgress and withCredentials.\n            this.reportProgress = !!options.reportProgress;\n            this.withCredentials = !!options.withCredentials;\n            // Override default response type of 'json' if one is provided.\n            if (!!options.responseType) {\n                this.responseType = options.responseType;\n            }\n            // Override headers if they're provided.\n            if (!!options.headers) {\n                this.headers = options.headers;\n            }\n            if (!!options.context) {\n                this.context = options.context;\n            }\n            if (!!options.params) {\n                this.params = options.params;\n            }\n            // We do want to assign transferCache even if it's falsy (false is valid value)\n            this.transferCache = options.transferCache;\n        }\n        // If no headers have been passed in, construct a new HttpHeaders instance.\n        this.headers ??= new HttpHeaders();\n        // If no context have been passed in, construct a new HttpContext instance.\n        this.context ??= new HttpContext();\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n        if (!this.params) {\n            this.params = new HttpParams();\n            this.urlWithParams = url;\n        }\n        else {\n            // Encode the parameters to a string in preparation for inclusion in the URL.\n            const params = this.params.toString();\n            if (params.length === 0) {\n                // No parameters, the visible URL is just the URL given at creation time.\n                this.urlWithParams = url;\n            }\n            else {\n                // Does the URL already have query parameters? Look for '?'.\n                const qIdx = url.indexOf('?');\n                // There are 3 cases to handle:\n                // 1) No existing parameters -> append '?' followed by params.\n                // 2) '?' exists and is followed by existing query string ->\n                //    append '&' followed by params.\n                // 3) '?' exists at the end of the url -> append params directly.\n                // This basically amounts to determining the character, if any, with\n                // which to join the URL and parameters.\n                const sep = qIdx === -1 ? '?' : qIdx < url.length - 1 ? '&' : '';\n                this.urlWithParams = url + sep + params;\n            }\n        }\n    }\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     */\n    serializeBody() {\n        // If no body is present, no need to serialize it.\n        if (this.body === null) {\n            return null;\n        }\n        // Check whether the body is already in a serialized form. If so,\n        // it can just be returned directly.\n        if (typeof this.body === 'string' ||\n            isArrayBuffer(this.body) ||\n            isBlob(this.body) ||\n            isFormData(this.body) ||\n            isUrlSearchParams(this.body)) {\n            return this.body;\n        }\n        // Check whether the body is an instance of HttpUrlEncodedParams.\n        if (this.body instanceof HttpParams) {\n            return this.body.toString();\n        }\n        // Check whether the body is an object or array, and serialize with JSON if so.\n        if (typeof this.body === 'object' ||\n            typeof this.body === 'boolean' ||\n            Array.isArray(this.body)) {\n            return JSON.stringify(this.body);\n        }\n        // Fall back on toString() for everything else.\n        return this.body.toString();\n    }\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     */\n    detectContentTypeHeader() {\n        // An empty body has no content type.\n        if (this.body === null) {\n            return null;\n        }\n        // FormData bodies rely on the browser's content type assignment.\n        if (isFormData(this.body)) {\n            return null;\n        }\n        // Blobs usually have their own content type. If it doesn't, then\n        // no type can be inferred.\n        if (isBlob(this.body)) {\n            return this.body.type || null;\n        }\n        // Array buffers have unknown contents and thus no type can be inferred.\n        if (isArrayBuffer(this.body)) {\n            return null;\n        }\n        // Technically, strings could be a form of JSON data, but it's safe enough\n        // to assume they're plain strings.\n        if (typeof this.body === 'string') {\n            return 'text/plain';\n        }\n        // `HttpUrlEncodedParams` has its own content-type.\n        if (this.body instanceof HttpParams) {\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\n        }\n        // Arrays, objects, boolean and numbers will be encoded as JSON.\n        if (typeof this.body === 'object' ||\n            typeof this.body === 'number' ||\n            typeof this.body === 'boolean') {\n            return 'application/json';\n        }\n        // No type could be inferred.\n        return null;\n    }\n    clone(update = {}) {\n        // For method, url, and responseType, take the current value unless\n        // it is overridden in the update hash.\n        const method = update.method || this.method;\n        const url = update.url || this.url;\n        const responseType = update.responseType || this.responseType;\n        // Carefully handle the transferCache to differentiate between\n        // `false` and `undefined` in the update args.\n        const transferCache = update.transferCache ?? this.transferCache;\n        // The body is somewhat special - a `null` value in update.body means\n        // whatever current body is present is being overridden with an empty\n        // body, whereas an `undefined` value in update.body implies no\n        // override.\n        const body = update.body !== undefined ? update.body : this.body;\n        // Carefully handle the boolean options to differentiate between\n        // `false` and `undefined` in the update args.\n        const withCredentials = update.withCredentials ?? this.withCredentials;\n        const reportProgress = update.reportProgress ?? this.reportProgress;\n        // Headers and params may be appended to if `setHeaders` or\n        // `setParams` are used.\n        let headers = update.headers || this.headers;\n        let params = update.params || this.params;\n        // Pass on context if needed\n        const context = update.context ?? this.context;\n        // Check whether the caller has asked to add headers.\n        if (update.setHeaders !== undefined) {\n            // Set every requested header.\n            headers = Object.keys(update.setHeaders).reduce((headers, name) => headers.set(name, update.setHeaders[name]), headers);\n        }\n        // Check whether the caller has asked to set params.\n        if (update.setParams) {\n            // Set every requested param.\n            params = Object.keys(update.setParams).reduce((params, param) => params.set(param, update.setParams[param]), params);\n        }\n        // Finally, construct the new HttpRequest using the pieces from above.\n        return new HttpRequest(method, url, body, {\n            params,\n            headers,\n            context,\n            reportProgress,\n            responseType,\n            withCredentials,\n            transferCache,\n        });\n    }\n}\n\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\nvar HttpEventType;\n(function (HttpEventType) {\n    /**\n     * The request was sent out over the wire.\n     */\n    HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\n    /**\n     * An upload progress event was received.\n     *\n     * Note: The `FetchBackend` doesn't support progress report on uploads.\n     */\n    HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\n    /**\n     * The response status code and headers were received.\n     */\n    HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\n    /**\n     * A download progress event was received.\n     */\n    HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\n    /**\n     * The full response including the body was received.\n     */\n    HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\n    /**\n     * A custom event from an interceptor or a backend.\n     */\n    HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\n})(HttpEventType || (HttpEventType = {}));\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\nclass HttpResponseBase {\n    /**\n     * Super-constructor for all responses.\n     *\n     * The single parameter accepted is an initialization hash. Any properties\n     * of the response passed there will override the default values.\n     */\n    constructor(init, defaultStatus = 200, defaultStatusText = 'OK') {\n        // If the hash has values passed, use them to initialize the response.\n        // Otherwise use the default values.\n        this.headers = init.headers || new HttpHeaders();\n        this.status = init.status !== undefined ? init.status : defaultStatus;\n        this.statusText = init.statusText || defaultStatusText;\n        this.url = init.url || null;\n        // Cache the ok value to avoid defining a getter.\n        this.ok = this.status >= 200 && this.status < 300;\n    }\n}\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\nclass HttpHeaderResponse extends HttpResponseBase {\n    /**\n     * Create a new `HttpHeaderResponse` with the given parameters.\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.ResponseHeader;\n    }\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     */\n    clone(update = {}) {\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\n        // overriding the current parameters with new ones if given.\n        return new HttpHeaderResponse({\n            headers: update.headers || this.headers,\n            status: update.status !== undefined ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\nclass HttpResponse extends HttpResponseBase {\n    /**\n     * Construct a new `HttpResponse`.\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.Response;\n        this.body = init.body !== undefined ? init.body : null;\n    }\n    clone(update = {}) {\n        return new HttpResponse({\n            body: update.body !== undefined ? update.body : this.body,\n            headers: update.headers || this.headers,\n            status: update.status !== undefined ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\nclass HttpErrorResponse extends HttpResponseBase {\n    constructor(init) {\n        // Initialize with a default status of 0 / Unknown Error.\n        super(init, 0, 'Unknown Error');\n        this.name = 'HttpErrorResponse';\n        /**\n         * Errors are never okay, even when the status code is in the 2xx success range.\n         */\n        this.ok = false;\n        // If the response was successful, then this was a parse error. Otherwise, it was\n        // a protocol-level failure of some sort. Either the request failed in transit\n        // or the server returned an unsuccessful status code.\n        if (this.status >= 200 && this.status < 300) {\n            this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n        }\n        else {\n            this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\n        }\n        this.error = init.error || null;\n    }\n}\n/**\n * We use these constant to prevent pulling the whole HttpStatusCode enum\n * Those are the only ones referenced directly by the framework\n */\nconst HTTP_STATUS_CODE_OK = 200;\nconst HTTP_STATUS_CODE_NO_CONTENT = 204;\n/**\n * Http status codes.\n * As per https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml\n * @publicApi\n */\nvar HttpStatusCode;\n(function (HttpStatusCode) {\n    HttpStatusCode[HttpStatusCode[\"Continue\"] = 100] = \"Continue\";\n    HttpStatusCode[HttpStatusCode[\"SwitchingProtocols\"] = 101] = \"SwitchingProtocols\";\n    HttpStatusCode[HttpStatusCode[\"Processing\"] = 102] = \"Processing\";\n    HttpStatusCode[HttpStatusCode[\"EarlyHints\"] = 103] = \"EarlyHints\";\n    HttpStatusCode[HttpStatusCode[\"Ok\"] = 200] = \"Ok\";\n    HttpStatusCode[HttpStatusCode[\"Created\"] = 201] = \"Created\";\n    HttpStatusCode[HttpStatusCode[\"Accepted\"] = 202] = \"Accepted\";\n    HttpStatusCode[HttpStatusCode[\"NonAuthoritativeInformation\"] = 203] = \"NonAuthoritativeInformation\";\n    HttpStatusCode[HttpStatusCode[\"NoContent\"] = 204] = \"NoContent\";\n    HttpStatusCode[HttpStatusCode[\"ResetContent\"] = 205] = \"ResetContent\";\n    HttpStatusCode[HttpStatusCode[\"PartialContent\"] = 206] = \"PartialContent\";\n    HttpStatusCode[HttpStatusCode[\"MultiStatus\"] = 207] = \"MultiStatus\";\n    HttpStatusCode[HttpStatusCode[\"AlreadyReported\"] = 208] = \"AlreadyReported\";\n    HttpStatusCode[HttpStatusCode[\"ImUsed\"] = 226] = \"ImUsed\";\n    HttpStatusCode[HttpStatusCode[\"MultipleChoices\"] = 300] = \"MultipleChoices\";\n    HttpStatusCode[HttpStatusCode[\"MovedPermanently\"] = 301] = \"MovedPermanently\";\n    HttpStatusCode[HttpStatusCode[\"Found\"] = 302] = \"Found\";\n    HttpStatusCode[HttpStatusCode[\"SeeOther\"] = 303] = \"SeeOther\";\n    HttpStatusCode[HttpStatusCode[\"NotModified\"] = 304] = \"NotModified\";\n    HttpStatusCode[HttpStatusCode[\"UseProxy\"] = 305] = \"UseProxy\";\n    HttpStatusCode[HttpStatusCode[\"Unused\"] = 306] = \"Unused\";\n    HttpStatusCode[HttpStatusCode[\"TemporaryRedirect\"] = 307] = \"TemporaryRedirect\";\n    HttpStatusCode[HttpStatusCode[\"PermanentRedirect\"] = 308] = \"PermanentRedirect\";\n    HttpStatusCode[HttpStatusCode[\"BadRequest\"] = 400] = \"BadRequest\";\n    HttpStatusCode[HttpStatusCode[\"Unauthorized\"] = 401] = \"Unauthorized\";\n    HttpStatusCode[HttpStatusCode[\"PaymentRequired\"] = 402] = \"PaymentRequired\";\n    HttpStatusCode[HttpStatusCode[\"Forbidden\"] = 403] = \"Forbidden\";\n    HttpStatusCode[HttpStatusCode[\"NotFound\"] = 404] = \"NotFound\";\n    HttpStatusCode[HttpStatusCode[\"MethodNotAllowed\"] = 405] = \"MethodNotAllowed\";\n    HttpStatusCode[HttpStatusCode[\"NotAcceptable\"] = 406] = \"NotAcceptable\";\n    HttpStatusCode[HttpStatusCode[\"ProxyAuthenticationRequired\"] = 407] = \"ProxyAuthenticationRequired\";\n    HttpStatusCode[HttpStatusCode[\"RequestTimeout\"] = 408] = \"RequestTimeout\";\n    HttpStatusCode[HttpStatusCode[\"Conflict\"] = 409] = \"Conflict\";\n    HttpStatusCode[HttpStatusCode[\"Gone\"] = 410] = \"Gone\";\n    HttpStatusCode[HttpStatusCode[\"LengthRequired\"] = 411] = \"LengthRequired\";\n    HttpStatusCode[HttpStatusCode[\"PreconditionFailed\"] = 412] = \"PreconditionFailed\";\n    HttpStatusCode[HttpStatusCode[\"PayloadTooLarge\"] = 413] = \"PayloadTooLarge\";\n    HttpStatusCode[HttpStatusCode[\"UriTooLong\"] = 414] = \"UriTooLong\";\n    HttpStatusCode[HttpStatusCode[\"UnsupportedMediaType\"] = 415] = \"UnsupportedMediaType\";\n    HttpStatusCode[HttpStatusCode[\"RangeNotSatisfiable\"] = 416] = \"RangeNotSatisfiable\";\n    HttpStatusCode[HttpStatusCode[\"ExpectationFailed\"] = 417] = \"ExpectationFailed\";\n    HttpStatusCode[HttpStatusCode[\"ImATeapot\"] = 418] = \"ImATeapot\";\n    HttpStatusCode[HttpStatusCode[\"MisdirectedRequest\"] = 421] = \"MisdirectedRequest\";\n    HttpStatusCode[HttpStatusCode[\"UnprocessableEntity\"] = 422] = \"UnprocessableEntity\";\n    HttpStatusCode[HttpStatusCode[\"Locked\"] = 423] = \"Locked\";\n    HttpStatusCode[HttpStatusCode[\"FailedDependency\"] = 424] = \"FailedDependency\";\n    HttpStatusCode[HttpStatusCode[\"TooEarly\"] = 425] = \"TooEarly\";\n    HttpStatusCode[HttpStatusCode[\"UpgradeRequired\"] = 426] = \"UpgradeRequired\";\n    HttpStatusCode[HttpStatusCode[\"PreconditionRequired\"] = 428] = \"PreconditionRequired\";\n    HttpStatusCode[HttpStatusCode[\"TooManyRequests\"] = 429] = \"TooManyRequests\";\n    HttpStatusCode[HttpStatusCode[\"RequestHeaderFieldsTooLarge\"] = 431] = \"RequestHeaderFieldsTooLarge\";\n    HttpStatusCode[HttpStatusCode[\"UnavailableForLegalReasons\"] = 451] = \"UnavailableForLegalReasons\";\n    HttpStatusCode[HttpStatusCode[\"InternalServerError\"] = 500] = \"InternalServerError\";\n    HttpStatusCode[HttpStatusCode[\"NotImplemented\"] = 501] = \"NotImplemented\";\n    HttpStatusCode[HttpStatusCode[\"BadGateway\"] = 502] = \"BadGateway\";\n    HttpStatusCode[HttpStatusCode[\"ServiceUnavailable\"] = 503] = \"ServiceUnavailable\";\n    HttpStatusCode[HttpStatusCode[\"GatewayTimeout\"] = 504] = \"GatewayTimeout\";\n    HttpStatusCode[HttpStatusCode[\"HttpVersionNotSupported\"] = 505] = \"HttpVersionNotSupported\";\n    HttpStatusCode[HttpStatusCode[\"VariantAlsoNegotiates\"] = 506] = \"VariantAlsoNegotiates\";\n    HttpStatusCode[HttpStatusCode[\"InsufficientStorage\"] = 507] = \"InsufficientStorage\";\n    HttpStatusCode[HttpStatusCode[\"LoopDetected\"] = 508] = \"LoopDetected\";\n    HttpStatusCode[HttpStatusCode[\"NotExtended\"] = 510] = \"NotExtended\";\n    HttpStatusCode[HttpStatusCode[\"NetworkAuthenticationRequired\"] = 511] = \"NetworkAuthenticationRequired\";\n})(HttpStatusCode || (HttpStatusCode = {}));\n\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n */\nfunction addBody(options, body) {\n    return {\n        body,\n        headers: options.headers,\n        context: options.context,\n        observe: options.observe,\n        params: options.params,\n        reportProgress: options.reportProgress,\n        responseType: options.responseType,\n        withCredentials: options.withCredentials,\n        transferCache: options.transferCache,\n    };\n}\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n\n * TODO(adev): review\n * @usageNotes\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n *\n * Alternatively, the parameter string can be used without invoking HttpParams\n * by directly joining to the URL.\n * ```\n * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});\n * ```\n *\n *\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n * @see [HTTP Request](api/common/http/HttpRequest)\n *\n * @publicApi\n */\nclass HttpClient {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    /**\n     * Constructs an observable for a generic HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * You can pass an `HttpRequest` directly as the only parameter. In this case,\n     * the call returns an observable of the raw `HttpEvent` stream.\n     *\n     * Alternatively you can pass an HTTP method as the first parameter,\n     * a URL string as the second, and an options hash containing the request body as the third.\n     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n     * type of returned observable.\n     *   * The `responseType` value determines how a successful response body is parsed.\n     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n     * object as a type parameter to the call.\n     *\n     * The `observe` value determines the return type, according to what you are interested in\n     * observing.\n     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n     * progress events by default.\n     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n     * where the `T` parameter depends on the `responseType` and any optionally provided type\n     * parameter.\n     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n     *\n     */\n    request(first, url, options = {}) {\n        let req;\n        // First, check whether the primary argument is an instance of `HttpRequest`.\n        if (first instanceof HttpRequest) {\n            // It is. The other arguments must be undefined (per the signatures) and can be\n            // ignored.\n            req = first;\n        }\n        else {\n            // It's a string, so it represents a URL. Construct a request based on it,\n            // and incorporate the remaining arguments (assuming `GET` unless a method is\n            // provided.\n            // Figure out the headers.\n            let headers = undefined;\n            if (options.headers instanceof HttpHeaders) {\n                headers = options.headers;\n            }\n            else {\n                headers = new HttpHeaders(options.headers);\n            }\n            // Sort out parameters.\n            let params = undefined;\n            if (!!options.params) {\n                if (options.params instanceof HttpParams) {\n                    params = options.params;\n                }\n                else {\n                    params = new HttpParams({ fromObject: options.params });\n                }\n            }\n            // Construct the request.\n            req = new HttpRequest(first, url, options.body !== undefined ? options.body : null, {\n                headers,\n                context: options.context,\n                params,\n                reportProgress: options.reportProgress,\n                // By default, JSON is assumed to be returned for all calls.\n                responseType: options.responseType || 'json',\n                withCredentials: options.withCredentials,\n                transferCache: options.transferCache,\n            });\n        }\n        // Start with an Observable.of() the initial request, and run the handler (which\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\n        // inside an Observable chain, which causes interceptors to be re-run on every\n        // subscription (this also makes retries re-run the handler, including interceptors).\n        const events$ = of(req).pipe(concatMap((req) => this.handler.handle(req)));\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\n        // the only option is to get the event stream. Otherwise, return the event stream if\n        // that is what was requested.\n        if (first instanceof HttpRequest || options.observe === 'events') {\n            return events$;\n        }\n        // The requested stream contains either the full response or the body. In either\n        // case, the first step is to filter the event stream to extract a stream of\n        // responses(s).\n        const res$ = (events$.pipe(filter((event) => event instanceof HttpResponse)));\n        // Decide which stream to return.\n        switch (options.observe || 'body') {\n            case 'body':\n                // The requested stream is the body. Map the response stream to the response\n                // body. This could be done more simply, but a misbehaving interceptor might\n                // transform the response body into a different format and ignore the requested\n                // responseType. Guard against this by validating that the response is of the\n                // requested type.\n                switch (req.responseType) {\n                    case 'arraybuffer':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is an ArrayBuffer.\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                                throw new Error('Response is not an ArrayBuffer.');\n                            }\n                            return res.body;\n                        }));\n                    case 'blob':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a Blob.\n                            if (res.body !== null && !(res.body instanceof Blob)) {\n                                throw new Error('Response is not a Blob.');\n                            }\n                            return res.body;\n                        }));\n                    case 'text':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a string.\n                            if (res.body !== null && typeof res.body !== 'string') {\n                                throw new Error('Response is not a string.');\n                            }\n                            return res.body;\n                        }));\n                    case 'json':\n                    default:\n                        // No validation needed for JSON responses, as they can be of any type.\n                        return res$.pipe(map((res) => res.body));\n                }\n            case 'response':\n                // The response stream was requested directly, so return it.\n                return res$;\n            default:\n                // Guard against new future observe types being added.\n                throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n        }\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `DELETE` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     */\n    delete(url, options = {}) {\n        return this.request('DELETE', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `GET` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    get(url, options = {}) {\n        return this.request('GET', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `HEAD` request to execute on the server. The `HEAD` method returns\n     * meta information about the resource without transferring the\n     * resource itself. See the individual overloads for\n     * details on the return type.\n     */\n    head(url, options = {}) {\n        return this.request('HEAD', url, options);\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\n     * `JSONP` to be dispatched via the interceptor pipeline.\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n     * API endpoints that don't support newer,\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n     * application making the request.\n     * The endpoint API must support JSONP callback for JSONP requests to work.\n     * The resource API returns the JSON response wrapped in a callback function.\n     * You can pass the callback function name as one of the query parameters.\n     * Note that JSONP requests can only be used with `GET` requests.\n     *\n     * @param url The resource URL.\n     * @param callbackParam The callback function name.\n     *\n     */\n    jsonp(url, callbackParam) {\n        return this.request('JSONP', url, {\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n            observe: 'body',\n            responseType: 'json',\n        });\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes the configured\n     * `OPTIONS` request to execute on the server. This method allows the client\n     * to determine the supported HTTP methods and other capabilities of an endpoint,\n     * without implying a resource action. See the individual overloads for\n     * details on the return type.\n     */\n    options(url, options = {}) {\n        return this.request('OPTIONS', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PATCH` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    patch(url, body, options = {}) {\n        return this.request('PATCH', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `POST` request to execute on the server. The server responds with the location of\n     * the replaced resource. See the individual overloads for\n     * details on the return type.\n     */\n    post(url, body, options = {}) {\n        return this.request('POST', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n     * with a new set of values.\n     * See the individual overloads for details on the return type.\n     */\n    put(url, body, options = {}) {\n        return this.request('PUT', url, addBody(options, body));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: HttpClient, deps: [{ token: HttpHandler }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: HttpClient }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: HttpClient, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: HttpHandler }] });\n\nconst XSSI_PREFIX$1 = /^\\)\\]\\}',?\\n/;\nconst REQUEST_URL_HEADER = `X-Request-URL`;\n/**\n * Determine an appropriate URL for the response, by checking either\n * response url or the X-Request-URL header.\n */\nfunction getResponseUrl$1(response) {\n    if (response.url) {\n        return response.url;\n    }\n    // stored as lowercase in the map\n    const xRequestUrl = REQUEST_URL_HEADER.toLocaleLowerCase();\n    return response.headers.get(xRequestUrl);\n}\n/**\n * Uses `fetch` to send requests to a backend server.\n *\n * This `FetchBackend` requires the support of the\n * [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) which is available on all\n * supported browsers and on Node.js v18 or later.\n *\n * @see {@link HttpHandler}\n *\n * @publicApi\n */\nclass FetchBackend {\n    constructor() {\n        // We use an arrow function to always reference the current global implementation of `fetch`.\n        // This is helpful for cases when the global `fetch` implementation is modified by external code,\n        // see https://github.com/angular/angular/issues/57527.\n        this.fetchImpl = inject(FetchFactory, { optional: true })?.fetch ?? ((...args) => globalThis.fetch(...args));\n        this.ngZone = inject(NgZone);\n    }\n    handle(request) {\n        return new Observable((observer) => {\n            const aborter = new AbortController();\n            this.doRequest(request, aborter.signal, observer).then(noop, (error) => observer.error(new HttpErrorResponse({ error })));\n            return () => aborter.abort();\n        });\n    }\n    async doRequest(request, signal, observer) {\n        const init = this.createRequestInit(request);\n        let response;\n        try {\n            // Run fetch outside of Angular zone.\n            // This is due to Node.js fetch implementation (Undici) which uses a number of setTimeouts to check if\n            // the response should eventually timeout which causes extra CD cycles every 500ms\n            const fetchPromise = this.ngZone.runOutsideAngular(() => this.fetchImpl(request.urlWithParams, { signal, ...init }));\n            // Make sure Zone.js doesn't trigger false-positive unhandled promise\n            // error in case the Promise is rejected synchronously. See function\n            // description for additional information.\n            silenceSuperfluousUnhandledPromiseRejection(fetchPromise);\n            // Send the `Sent` event before awaiting the response.\n            observer.next({ type: HttpEventType.Sent });\n            response = await fetchPromise;\n        }\n        catch (error) {\n            observer.error(new HttpErrorResponse({\n                error,\n                status: error.status ?? 0,\n                statusText: error.statusText,\n                url: request.urlWithParams,\n                headers: error.headers,\n            }));\n            return;\n        }\n        const headers = new HttpHeaders(response.headers);\n        const statusText = response.statusText;\n        const url = getResponseUrl$1(response) ?? request.urlWithParams;\n        let status = response.status;\n        let body = null;\n        if (request.reportProgress) {\n            observer.next(new HttpHeaderResponse({ headers, status, statusText, url }));\n        }\n        if (response.body) {\n            // Read Progress\n            const contentLength = response.headers.get('content-length');\n            const chunks = [];\n            const reader = response.body.getReader();\n            let receivedLength = 0;\n            let decoder;\n            let partialText;\n            // We have to check whether the Zone is defined in the global scope because this may be called\n            // when the zone is nooped.\n            const reqZone = typeof Zone !== 'undefined' && Zone.current;\n            // Perform response processing outside of Angular zone to\n            // ensure no excessive change detection runs are executed\n            // Here calling the async ReadableStreamDefaultReader.read() is responsible for triggering CD\n            await this.ngZone.runOutsideAngular(async () => {\n                while (true) {\n                    const { done, value } = await reader.read();\n                    if (done) {\n                        break;\n                    }\n                    chunks.push(value);\n                    receivedLength += value.length;\n                    if (request.reportProgress) {\n                        partialText =\n                            request.responseType === 'text'\n                                ? (partialText ?? '') +\n                                    (decoder ??= new TextDecoder()).decode(value, { stream: true })\n                                : undefined;\n                        const reportProgress = () => observer.next({\n                            type: HttpEventType.DownloadProgress,\n                            total: contentLength ? +contentLength : undefined,\n                            loaded: receivedLength,\n                            partialText,\n                        });\n                        reqZone ? reqZone.run(reportProgress) : reportProgress();\n                    }\n                }\n            });\n            // Combine all chunks.\n            const chunksAll = this.concatChunks(chunks, receivedLength);\n            try {\n                const contentType = response.headers.get('Content-Type') ?? '';\n                body = this.parseBody(request, chunksAll, contentType);\n            }\n            catch (error) {\n                // Body loading or parsing failed\n                observer.error(new HttpErrorResponse({\n                    error,\n                    headers: new HttpHeaders(response.headers),\n                    status: response.status,\n                    statusText: response.statusText,\n                    url: getResponseUrl$1(response) ?? request.urlWithParams,\n                }));\n                return;\n            }\n        }\n        // Same behavior as the XhrBackend\n        if (status === 0) {\n            status = body ? HTTP_STATUS_CODE_OK : 0;\n        }\n        // ok determines whether the response will be transmitted on the event or\n        // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n        // but a successful status code can still result in an error if the user\n        // asked for JSON data and the body cannot be parsed as such.\n        const ok = status >= 200 && status < 300;\n        if (ok) {\n            observer.next(new HttpResponse({\n                body,\n                headers,\n                status,\n                statusText,\n                url,\n            }));\n            // The full body has been received and delivered, no further events\n            // are possible. This request is complete.\n            observer.complete();\n        }\n        else {\n            observer.error(new HttpErrorResponse({\n                error: body,\n                headers,\n                status,\n                statusText,\n                url,\n            }));\n        }\n    }\n    parseBody(request, binContent, contentType) {\n        switch (request.responseType) {\n            case 'json':\n                // stripping the XSSI when present\n                const text = new TextDecoder().decode(binContent).replace(XSSI_PREFIX$1, '');\n                return text === '' ? null : JSON.parse(text);\n            case 'text':\n                return new TextDecoder().decode(binContent);\n            case 'blob':\n                return new Blob([binContent], { type: contentType });\n            case 'arraybuffer':\n                return binContent.buffer;\n        }\n    }\n    createRequestInit(req) {\n        // We could share some of this logic with the XhrBackend\n        const headers = {};\n        const credentials = req.withCredentials ? 'include' : undefined;\n        // Setting all the requested headers.\n        req.headers.forEach((name, values) => (headers[name] = values.join(',')));\n        // Add an Accept header if one isn't present already.\n        if (!req.headers.has('Accept')) {\n            headers['Accept'] = 'application/json, text/plain, */*';\n        }\n        // Auto-detect the Content-Type header if one isn't present already.\n        if (!req.headers.has('Content-Type')) {\n            const detectedType = req.detectContentTypeHeader();\n            // Sometimes Content-Type detection fails.\n            if (detectedType !== null) {\n                headers['Content-Type'] = detectedType;\n            }\n        }\n        return {\n            body: req.serializeBody(),\n            method: req.method,\n            headers,\n            credentials,\n        };\n    }\n    concatChunks(chunks, totalLength) {\n        const chunksAll = new Uint8Array(totalLength);\n        let position = 0;\n        for (const chunk of chunks) {\n            chunksAll.set(chunk, position);\n            position += chunk.length;\n        }\n        return chunksAll;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: FetchBackend, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: FetchBackend }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: FetchBackend, decorators: [{\n            type: Injectable\n        }] });\n/**\n * Abstract class to provide a mocked implementation of `fetch()`\n */\nclass FetchFactory {\n}\nfunction noop() { }\n/**\n * Zone.js treats a rejected promise that has not yet been awaited\n * as an unhandled error. This function adds a noop `.then` to make\n * sure that Zone.js doesn't throw an error if the Promise is rejected\n * synchronously.\n */\nfunction silenceSuperfluousUnhandledPromiseRejection(promise) {\n    promise.then(noop, noop);\n}\n\nfunction interceptorChainEndFn(req, finalHandlerFn) {\n    return finalHandlerFn(req);\n}\n/**\n * Constructs a `ChainedInterceptorFn` which adapts a legacy `HttpInterceptor` to the\n * `ChainedInterceptorFn` interface.\n */\nfunction adaptLegacyInterceptorToChain(chainTailFn, interceptor) {\n    return (initialRequest, finalHandlerFn) => interceptor.intercept(initialRequest, {\n        handle: (downstreamRequest) => chainTailFn(downstreamRequest, finalHandlerFn),\n    });\n}\n/**\n * Constructs a `ChainedInterceptorFn` which wraps and invokes a functional interceptor in the given\n * injector.\n */\nfunction chainedInterceptorFn(chainTailFn, interceptorFn, injector) {\n    return (initialRequest, finalHandlerFn) => runInInjectionContext(injector, () => interceptorFn(initialRequest, (downstreamRequest) => chainTailFn(downstreamRequest, finalHandlerFn)));\n}\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * @publicApi\n */\nconst HTTP_INTERCEPTORS = new InjectionToken(ngDevMode ? 'HTTP_INTERCEPTORS' : '');\n/**\n * A multi-provided token of `HttpInterceptorFn`s.\n */\nconst HTTP_INTERCEPTOR_FNS = new InjectionToken(ngDevMode ? 'HTTP_INTERCEPTOR_FNS' : '');\n/**\n * A multi-provided token of `HttpInterceptorFn`s that are only set in root.\n */\nconst HTTP_ROOT_INTERCEPTOR_FNS = new InjectionToken(ngDevMode ? 'HTTP_ROOT_INTERCEPTOR_FNS' : '');\n// TODO(atscott): We need a larger discussion about stability and what should contribute to stability.\n// Should the whole interceptor chain contribute to stability or just the backend request #55075?\n// Should HttpClient contribute to stability automatically at all?\nconst REQUESTS_CONTRIBUTE_TO_STABILITY = new InjectionToken(ngDevMode ? 'REQUESTS_CONTRIBUTE_TO_STABILITY' : '', { providedIn: 'root', factory: () => true });\n/**\n * Creates an `HttpInterceptorFn` which lazily initializes an interceptor chain from the legacy\n * class-based interceptors and runs the request through it.\n */\nfunction legacyInterceptorFnFactory() {\n    let chain = null;\n    return (req, handler) => {\n        if (chain === null) {\n            const interceptors = inject(HTTP_INTERCEPTORS, { optional: true }) ?? [];\n            // Note: interceptors are wrapped right-to-left so that final execution order is\n            // left-to-right. That is, if `interceptors` is the array `[a, b, c]`, we want to\n            // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n            // out.\n            chain = interceptors.reduceRight(adaptLegacyInterceptorToChain, interceptorChainEndFn);\n        }\n        const pendingTasks = inject(ɵPendingTasks);\n        const contributeToStability = inject(REQUESTS_CONTRIBUTE_TO_STABILITY);\n        if (contributeToStability) {\n            const taskId = pendingTasks.add();\n            return chain(req, handler).pipe(finalize(() => pendingTasks.remove(taskId)));\n        }\n        else {\n            return chain(req, handler);\n        }\n    };\n}\nlet fetchBackendWarningDisplayed = false;\n/** Internal function to reset the flag in tests */\nfunction resetFetchBackendWarningFlag() {\n    fetchBackendWarningDisplayed = false;\n}\nclass HttpInterceptorHandler extends HttpHandler {\n    constructor(backend, injector) {\n        super();\n        this.backend = backend;\n        this.injector = injector;\n        this.chain = null;\n        this.pendingTasks = inject(ɵPendingTasks);\n        this.contributeToStability = inject(REQUESTS_CONTRIBUTE_TO_STABILITY);\n        // We strongly recommend using fetch backend for HTTP calls when SSR is used\n        // for an application. The logic below checks if that's the case and produces\n        // a warning otherwise.\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && !fetchBackendWarningDisplayed) {\n            const isServer = isPlatformServer(injector.get(PLATFORM_ID));\n            if (isServer && !(this.backend instanceof FetchBackend)) {\n                fetchBackendWarningDisplayed = true;\n                injector\n                    .get(ɵConsole)\n                    .warn(ɵformatRuntimeError(2801 /* RuntimeErrorCode.NOT_USING_FETCH_BACKEND_IN_SSR */, 'Angular detected that `HttpClient` is not configured ' +\n                    \"to use `fetch` APIs. It's strongly recommended to \" +\n                    'enable `fetch` for applications that use Server-Side Rendering ' +\n                    'for better performance and compatibility. ' +\n                    'To enable `fetch`, add the `withFetch()` to the `provideHttpClient()` ' +\n                    'call at the root of the application.'));\n            }\n        }\n    }\n    handle(initialRequest) {\n        if (this.chain === null) {\n            const dedupedInterceptorFns = Array.from(new Set([\n                ...this.injector.get(HTTP_INTERCEPTOR_FNS),\n                ...this.injector.get(HTTP_ROOT_INTERCEPTOR_FNS, []),\n            ]));\n            // Note: interceptors are wrapped right-to-left so that final execution order is\n            // left-to-right. That is, if `dedupedInterceptorFns` is the array `[a, b, c]`, we want to\n            // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n            // out.\n            this.chain = dedupedInterceptorFns.reduceRight((nextSequencedFn, interceptorFn) => chainedInterceptorFn(nextSequencedFn, interceptorFn, this.injector), interceptorChainEndFn);\n        }\n        if (this.contributeToStability) {\n            const taskId = this.pendingTasks.add();\n            return this.chain(initialRequest, (downstreamRequest) => this.backend.handle(downstreamRequest)).pipe(finalize(() => this.pendingTasks.remove(taskId)));\n        }\n        else {\n            return this.chain(initialRequest, (downstreamRequest) => this.backend.handle(downstreamRequest));\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: HttpInterceptorHandler, deps: [{ token: HttpBackend }, { token: i0.EnvironmentInjector }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: HttpInterceptorHandler }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: HttpInterceptorHandler, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: HttpBackend }, { type: i0.EnvironmentInjector }] });\n\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nlet nextRequestId = 0;\n/**\n * When a pending <script> is unsubscribed we'll move it to this document, so it won't be\n * executed.\n */\nlet foreignDocument;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n// Error text given when a request is passed to the JsonpClientBackend that has\n// headers set\nconst JSONP_ERR_HEADERS_NOT_SUPPORTED = 'JSONP requests do not support headers.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\nclass JsonpCallbackContext {\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\nfunction jsonpCallbackContext() {\n    if (typeof window === 'object') {\n        return window;\n    }\n    return {};\n}\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see {@link HttpHandler}\n * @see {@link HttpXhrBackend}\n *\n * @publicApi\n */\nclass JsonpClientBackend {\n    constructor(callbackMap, document) {\n        this.callbackMap = callbackMap;\n        this.document = document;\n        /**\n         * A resolved promise that can be used to schedule microtasks in the event handlers.\n         */\n        this.resolvedPromise = Promise.resolve();\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     */\n    nextCallback() {\n        return `ng_jsonp_callback_${nextRequestId++}`;\n    }\n    /**\n     * Processes a JSONP request and returns an event stream of the results.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     *\n     */\n    handle(req) {\n        // Firstly, check both the method and response type. If either doesn't match\n        // then the request was improperly routed here and cannot be handled.\n        if (req.method !== 'JSONP') {\n            throw new Error(JSONP_ERR_WRONG_METHOD);\n        }\n        else if (req.responseType !== 'json') {\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n        }\n        // Check the request headers. JSONP doesn't support headers and\n        // cannot set any that were supplied.\n        if (req.headers.keys().length > 0) {\n            throw new Error(JSONP_ERR_HEADERS_NOT_SUPPORTED);\n        }\n        // Everything else happens inside the Observable boundary.\n        return new Observable((observer) => {\n            // The first step to make a request is to generate the callback name, and replace the\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\n            const callback = this.nextCallback();\n            const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n            // Construct the <script> tag and point it at the URL.\n            const node = this.document.createElement('script');\n            node.src = url;\n            // A JSONP request requires waiting for multiple callbacks. These variables\n            // are closed over and track state across those callbacks.\n            // The response object, if one has been received, or null otherwise.\n            let body = null;\n            // Whether the response callback has been called.\n            let finished = false;\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            this.callbackMap[callback] = (data) => {\n                // Data has been received from the JSONP script. Firstly, delete this callback.\n                delete this.callbackMap[callback];\n                // Set state to indicate data was received.\n                body = data;\n                finished = true;\n            };\n            // cleanup() is a utility closure that removes the <script> from the page and\n            // the response callback from the window. This logic is used in both the\n            // success, error, and cancellation paths, so it's extracted out for convenience.\n            const cleanup = () => {\n                node.removeEventListener('load', onLoad);\n                node.removeEventListener('error', onError);\n                // Remove the <script> tag if it's still on the page.\n                node.remove();\n                // Remove the response callback from the callbackMap (window object in the\n                // browser).\n                delete this.callbackMap[callback];\n            };\n            // onLoad() is the success callback which runs after the response callback\n            // if the JSONP script loads successfully. The event itself is unimportant.\n            // If something went wrong, onLoad() may run without the response callback\n            // having been invoked.\n            const onLoad = (event) => {\n                // We wrap it in an extra Promise, to ensure the microtask\n                // is scheduled after the loaded endpoint has executed any potential microtask itself,\n                // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\n                this.resolvedPromise.then(() => {\n                    // Cleanup the page.\n                    cleanup();\n                    // Check whether the response callback has run.\n                    if (!finished) {\n                        // It hasn't, something went wrong with the request. Return an error via\n                        // the Observable error path. All JSONP errors have status 0.\n                        observer.error(new HttpErrorResponse({\n                            url,\n                            status: 0,\n                            statusText: 'JSONP Error',\n                            error: new Error(JSONP_ERR_NO_CALLBACK),\n                        }));\n                        return;\n                    }\n                    // Success. body either contains the response body or null if none was\n                    // returned.\n                    observer.next(new HttpResponse({\n                        body,\n                        status: HTTP_STATUS_CODE_OK,\n                        statusText: 'OK',\n                        url,\n                    }));\n                    // Complete the stream, the response is over.\n                    observer.complete();\n                });\n            };\n            // onError() is the error callback, which runs if the script returned generates\n            // a Javascript error. It emits the error via the Observable error channel as\n            // a HttpErrorResponse.\n            const onError = (error) => {\n                cleanup();\n                // Wrap the error in a HttpErrorResponse.\n                observer.error(new HttpErrorResponse({\n                    error,\n                    status: 0,\n                    statusText: 'JSONP Error',\n                    url,\n                }));\n            };\n            // Subscribe to both the success (load) and error events on the <script> tag,\n            // and add it to the page.\n            node.addEventListener('load', onLoad);\n            node.addEventListener('error', onError);\n            this.document.body.appendChild(node);\n            // The request has now been successfully sent.\n            observer.next({ type: HttpEventType.Sent });\n            // Cancellation handler.\n            return () => {\n                if (!finished) {\n                    this.removeListeners(node);\n                }\n                // And finally, clean up the page.\n                cleanup();\n            };\n        });\n    }\n    removeListeners(script) {\n        // Issue #34818\n        // Changing <script>'s ownerDocument will prevent it from execution.\n        // https://html.spec.whatwg.org/multipage/scripting.html#execute-the-script-block\n        foreignDocument ??= this.document.implementation.createHTMLDocument();\n        foreignDocument.adoptNode(script);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: JsonpClientBackend, deps: [{ token: JsonpCallbackContext }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: JsonpClientBackend }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: JsonpClientBackend, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: JsonpCallbackContext }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }] });\n/**\n * Identifies requests with the method JSONP and shifts them to the `JsonpClientBackend`.\n */\nfunction jsonpInterceptorFn(req, next) {\n    if (req.method === 'JSONP') {\n        return inject(JsonpClientBackend).handle(req);\n    }\n    // Fall through for normal HTTP requests.\n    return next(req);\n}\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see {@link HttpInterceptor}\n *\n * @publicApi\n */\nclass JsonpInterceptor {\n    constructor(injector) {\n        this.injector = injector;\n    }\n    /**\n     * Identifies and handles a given JSONP request.\n     * @param initialRequest The outgoing request object to handle.\n     * @param next The next interceptor in the chain, or the backend\n     * if no interceptors remain in the chain.\n     * @returns An observable of the event stream.\n     */\n    intercept(initialRequest, next) {\n        return runInInjectionContext(this.injector, () => jsonpInterceptorFn(initialRequest, (downstreamRequest) => next.handle(downstreamRequest)));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: JsonpInterceptor, deps: [{ token: i0.EnvironmentInjector }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: JsonpInterceptor }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: JsonpInterceptor, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: i0.EnvironmentInjector }] });\n\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\nfunction getResponseUrl(xhr) {\n    if ('responseURL' in xhr && xhr.responseURL) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see {@link HttpHandler}\n * @see {@link JsonpClientBackend}\n *\n * @publicApi\n */\nclass HttpXhrBackend {\n    constructor(xhrFactory) {\n        this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Processes a request and returns a stream of response events.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     */\n    handle(req) {\n        // Quick check to give a better error message when a user attempts to use\n        // HttpClient.jsonp() without installing the HttpClientJsonpModule\n        if (req.method === 'JSONP') {\n            throw new ɵRuntimeError(-2800 /* RuntimeErrorCode.MISSING_JSONP_MODULE */, (typeof ngDevMode === 'undefined' || ngDevMode) &&\n                `Cannot make a JSONP request without JSONP support. To fix the problem, either add the \\`withJsonpSupport()\\` call (if \\`provideHttpClient()\\` is used) or import the \\`HttpClientJsonpModule\\` in the root NgModule.`);\n        }\n        // Check whether this factory has a special function to load an XHR implementation\n        // for various non-browser environments. We currently limit it to only `ServerXhr`\n        // class, which needs to load an XHR implementation.\n        const xhrFactory = this.xhrFactory;\n        const source = xhrFactory.ɵloadImpl\n            ? from(xhrFactory.ɵloadImpl())\n            : of(null);\n        return source.pipe(switchMap(() => {\n            // Everything happens on Observable subscription.\n            return new Observable((observer) => {\n                // Start by setting up the XHR object with request method, URL, and withCredentials\n                // flag.\n                const xhr = xhrFactory.build();\n                xhr.open(req.method, req.urlWithParams);\n                if (req.withCredentials) {\n                    xhr.withCredentials = true;\n                }\n                // Add all the requested headers.\n                req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\n                // Add an Accept header if one isn't present already.\n                if (!req.headers.has('Accept')) {\n                    xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n                }\n                // Auto-detect the Content-Type header if one isn't present already.\n                if (!req.headers.has('Content-Type')) {\n                    const detectedType = req.detectContentTypeHeader();\n                    // Sometimes Content-Type detection fails.\n                    if (detectedType !== null) {\n                        xhr.setRequestHeader('Content-Type', detectedType);\n                    }\n                }\n                // Set the responseType if one was requested.\n                if (req.responseType) {\n                    const responseType = req.responseType.toLowerCase();\n                    // JSON responses need to be processed as text. This is because if the server\n                    // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n                    // xhr.response will be null, and xhr.responseText cannot be accessed to\n                    // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n                    // is parsed by first requesting text and then applying JSON.parse.\n                    xhr.responseType = (responseType !== 'json' ? responseType : 'text');\n                }\n                // Serialize the request body if one is present. If not, this will be set to null.\n                const reqBody = req.serializeBody();\n                // If progress events are enabled, response headers will be delivered\n                // in two events - the HttpHeaderResponse event and the full HttpResponse\n                // event. However, since response headers don't change in between these\n                // two events, it doesn't make sense to parse them twice. So headerResponse\n                // caches the data extracted from the response whenever it's first parsed,\n                // to ensure parsing isn't duplicated.\n                let headerResponse = null;\n                // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n                // state, and memoizes it into headerResponse.\n                const partialFromXhr = () => {\n                    if (headerResponse !== null) {\n                        return headerResponse;\n                    }\n                    const statusText = xhr.statusText || 'OK';\n                    // Parse headers from XMLHttpRequest - this step is lazy.\n                    const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n                    // Read the response URL from the XMLHttpResponse instance and fall back on the\n                    // request URL.\n                    const url = getResponseUrl(xhr) || req.url;\n                    // Construct the HttpHeaderResponse and memoize it.\n                    headerResponse = new HttpHeaderResponse({ headers, status: xhr.status, statusText, url });\n                    return headerResponse;\n                };\n                // Next, a few closures are defined for the various events which XMLHttpRequest can\n                // emit. This allows them to be unregistered as event listeners later.\n                // First up is the load event, which represents a response being fully available.\n                const onLoad = () => {\n                    // Read response state from the memoized partial data.\n                    let { headers, status, statusText, url } = partialFromXhr();\n                    // The body will be read out if present.\n                    let body = null;\n                    if (status !== HTTP_STATUS_CODE_NO_CONTENT) {\n                        // Use XMLHttpRequest.response if set, responseText otherwise.\n                        body = typeof xhr.response === 'undefined' ? xhr.responseText : xhr.response;\n                    }\n                    // Normalize another potential bug (this one comes from CORS).\n                    if (status === 0) {\n                        status = !!body ? HTTP_STATUS_CODE_OK : 0;\n                    }\n                    // ok determines whether the response will be transmitted on the event or\n                    // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n                    // but a successful status code can still result in an error if the user\n                    // asked for JSON data and the body cannot be parsed as such.\n                    let ok = status >= 200 && status < 300;\n                    // Check whether the body needs to be parsed as JSON (in many cases the browser\n                    // will have done that already).\n                    if (req.responseType === 'json' && typeof body === 'string') {\n                        // Save the original body, before attempting XSSI prefix stripping.\n                        const originalBody = body;\n                        body = body.replace(XSSI_PREFIX, '');\n                        try {\n                            // Attempt the parse. If it fails, a parse error should be delivered to the\n                            // user.\n                            body = body !== '' ? JSON.parse(body) : null;\n                        }\n                        catch (error) {\n                            // Since the JSON.parse failed, it's reasonable to assume this might not have\n                            // been a JSON response. Restore the original body (including any XSSI prefix)\n                            // to deliver a better error response.\n                            body = originalBody;\n                            // If this was an error request to begin with, leave it as a string, it\n                            // probably just isn't JSON. Otherwise, deliver the parsing error to the user.\n                            if (ok) {\n                                // Even though the response status was 2xx, this is still an error.\n                                ok = false;\n                                // The parse error contains the text of the body that failed to parse.\n                                body = { error, text: body };\n                            }\n                        }\n                    }\n                    if (ok) {\n                        // A successful response is delivered on the event stream.\n                        observer.next(new HttpResponse({\n                            body,\n                            headers,\n                            status,\n                            statusText,\n                            url: url || undefined,\n                        }));\n                        // The full body has been received and delivered, no further events\n                        // are possible. This request is complete.\n                        observer.complete();\n                    }\n                    else {\n                        // An unsuccessful request is delivered on the error channel.\n                        observer.error(new HttpErrorResponse({\n                            // The error in this case is the response body (error from the server).\n                            error: body,\n                            headers,\n                            status,\n                            statusText,\n                            url: url || undefined,\n                        }));\n                    }\n                };\n                // The onError callback is called when something goes wrong at the network level.\n                // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n                // transmitted on the error channel.\n                const onError = (error) => {\n                    const { url } = partialFromXhr();\n                    const res = new HttpErrorResponse({\n                        error,\n                        status: xhr.status || 0,\n                        statusText: xhr.statusText || 'Unknown Error',\n                        url: url || undefined,\n                    });\n                    observer.error(res);\n                };\n                // The sentHeaders flag tracks whether the HttpResponseHeaders event\n                // has been sent on the stream. This is necessary to track if progress\n                // is enabled since the event will be sent on only the first download\n                // progress event.\n                let sentHeaders = false;\n                // The download progress event handler, which is only registered if\n                // progress events are enabled.\n                const onDownProgress = (event) => {\n                    // Send the HttpResponseHeaders event if it hasn't been sent already.\n                    if (!sentHeaders) {\n                        observer.next(partialFromXhr());\n                        sentHeaders = true;\n                    }\n                    // Start building the download progress event to deliver on the response\n                    // event stream.\n                    let progressEvent = {\n                        type: HttpEventType.DownloadProgress,\n                        loaded: event.loaded,\n                    };\n                    // Set the total number of bytes in the event if it's available.\n                    if (event.lengthComputable) {\n                        progressEvent.total = event.total;\n                    }\n                    // If the request was for text content and a partial response is\n                    // available on XMLHttpRequest, include it in the progress event\n                    // to allow for streaming reads.\n                    if (req.responseType === 'text' && !!xhr.responseText) {\n                        progressEvent.partialText = xhr.responseText;\n                    }\n                    // Finally, fire the event.\n                    observer.next(progressEvent);\n                };\n                // The upload progress event handler, which is only registered if\n                // progress events are enabled.\n                const onUpProgress = (event) => {\n                    // Upload progress events are simpler. Begin building the progress\n                    // event.\n                    let progress = {\n                        type: HttpEventType.UploadProgress,\n                        loaded: event.loaded,\n                    };\n                    // If the total number of bytes being uploaded is available, include\n                    // it.\n                    if (event.lengthComputable) {\n                        progress.total = event.total;\n                    }\n                    // Send the event.\n                    observer.next(progress);\n                };\n                // By default, register for load and error events.\n                xhr.addEventListener('load', onLoad);\n                xhr.addEventListener('error', onError);\n                xhr.addEventListener('timeout', onError);\n                xhr.addEventListener('abort', onError);\n                // Progress events are only enabled if requested.\n                if (req.reportProgress) {\n                    // Download progress is always enabled if requested.\n                    xhr.addEventListener('progress', onDownProgress);\n                    // Upload progress depends on whether there is a body to upload.\n                    if (reqBody !== null && xhr.upload) {\n                        xhr.upload.addEventListener('progress', onUpProgress);\n                    }\n                }\n                // Fire the request, and notify the event stream that it was fired.\n                xhr.send(reqBody);\n                observer.next({ type: HttpEventType.Sent });\n                // This is the return from the Observable function, which is the\n                // request cancellation handler.\n                return () => {\n                    // On a cancellation, remove all registered event listeners.\n                    xhr.removeEventListener('error', onError);\n                    xhr.removeEventListener('abort', onError);\n                    xhr.removeEventListener('load', onLoad);\n                    xhr.removeEventListener('timeout', onError);\n                    if (req.reportProgress) {\n                        xhr.removeEventListener('progress', onDownProgress);\n                        if (reqBody !== null && xhr.upload) {\n                            xhr.upload.removeEventListener('progress', onUpProgress);\n                        }\n                    }\n                    // Finally, abort the in-flight request.\n                    if (xhr.readyState !== xhr.DONE) {\n                        xhr.abort();\n                    }\n                };\n            });\n        }));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: HttpXhrBackend, deps: [{ token: i1.XhrFactory }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: HttpXhrBackend }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: HttpXhrBackend, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: i1.XhrFactory }] });\n\nconst XSRF_ENABLED = new InjectionToken(ngDevMode ? 'XSRF_ENABLED' : '');\nconst XSRF_DEFAULT_COOKIE_NAME = 'XSRF-TOKEN';\nconst XSRF_COOKIE_NAME = new InjectionToken(ngDevMode ? 'XSRF_COOKIE_NAME' : '', {\n    providedIn: 'root',\n    factory: () => XSRF_DEFAULT_COOKIE_NAME,\n});\nconst XSRF_DEFAULT_HEADER_NAME = 'X-XSRF-TOKEN';\nconst XSRF_HEADER_NAME = new InjectionToken(ngDevMode ? 'XSRF_HEADER_NAME' : '', {\n    providedIn: 'root',\n    factory: () => XSRF_DEFAULT_HEADER_NAME,\n});\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\nclass HttpXsrfTokenExtractor {\n}\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nclass HttpXsrfCookieExtractor {\n    constructor(doc, platform, cookieName) {\n        this.doc = doc;\n        this.platform = platform;\n        this.cookieName = cookieName;\n        this.lastCookieString = '';\n        this.lastToken = null;\n        /**\n         * @internal for testing\n         */\n        this.parseCount = 0;\n    }\n    getToken() {\n        if (this.platform === 'server') {\n            return null;\n        }\n        const cookieString = this.doc.cookie || '';\n        if (cookieString !== this.lastCookieString) {\n            this.parseCount++;\n            this.lastToken = ɵparseCookieValue(cookieString, this.cookieName);\n            this.lastCookieString = cookieString;\n        }\n        return this.lastToken;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: HttpXsrfCookieExtractor, deps: [{ token: DOCUMENT }, { token: PLATFORM_ID }, { token: XSRF_COOKIE_NAME }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: HttpXsrfCookieExtractor }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: HttpXsrfCookieExtractor, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [XSRF_COOKIE_NAME]\n                }] }] });\nfunction xsrfInterceptorFn(req, next) {\n    const lcUrl = req.url.toLowerCase();\n    // Skip both non-mutating requests and absolute URLs.\n    // Non-mutating requests don't require a token, and absolute URLs require special handling\n    // anyway as the cookie set\n    // on our origin is not the same as the token expected by another origin.\n    if (!inject(XSRF_ENABLED) ||\n        req.method === 'GET' ||\n        req.method === 'HEAD' ||\n        lcUrl.startsWith('http://') ||\n        lcUrl.startsWith('https://')) {\n        return next(req);\n    }\n    const token = inject(HttpXsrfTokenExtractor).getToken();\n    const headerName = inject(XSRF_HEADER_NAME);\n    // Be careful not to overwrite an existing header of the same name.\n    if (token != null && !req.headers.has(headerName)) {\n        req = req.clone({ headers: req.headers.set(headerName, token) });\n    }\n    return next(req);\n}\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nclass HttpXsrfInterceptor {\n    constructor(injector) {\n        this.injector = injector;\n    }\n    intercept(initialRequest, next) {\n        return runInInjectionContext(this.injector, () => xsrfInterceptorFn(initialRequest, (downstreamRequest) => next.handle(downstreamRequest)));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: HttpXsrfInterceptor, deps: [{ token: i0.EnvironmentInjector }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: HttpXsrfInterceptor }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: HttpXsrfInterceptor, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: i0.EnvironmentInjector }] });\n\n/**\n * Identifies a particular kind of `HttpFeature`.\n *\n * @publicApi\n */\nvar HttpFeatureKind;\n(function (HttpFeatureKind) {\n    HttpFeatureKind[HttpFeatureKind[\"Interceptors\"] = 0] = \"Interceptors\";\n    HttpFeatureKind[HttpFeatureKind[\"LegacyInterceptors\"] = 1] = \"LegacyInterceptors\";\n    HttpFeatureKind[HttpFeatureKind[\"CustomXsrfConfiguration\"] = 2] = \"CustomXsrfConfiguration\";\n    HttpFeatureKind[HttpFeatureKind[\"NoXsrfProtection\"] = 3] = \"NoXsrfProtection\";\n    HttpFeatureKind[HttpFeatureKind[\"JsonpSupport\"] = 4] = \"JsonpSupport\";\n    HttpFeatureKind[HttpFeatureKind[\"RequestsMadeViaParent\"] = 5] = \"RequestsMadeViaParent\";\n    HttpFeatureKind[HttpFeatureKind[\"Fetch\"] = 6] = \"Fetch\";\n})(HttpFeatureKind || (HttpFeatureKind = {}));\nfunction makeHttpFeature(kind, providers) {\n    return {\n        ɵkind: kind,\n        ɵproviders: providers,\n    };\n}\n/**\n * Configures Angular's `HttpClient` service to be available for injection.\n *\n * By default, `HttpClient` will be configured for injection with its default options for XSRF\n * protection of outgoing requests. Additional configuration options can be provided by passing\n * feature functions to `provideHttpClient`. For example, HTTP interceptors can be added using the\n * `withInterceptors(...)` feature.\n *\n * <div class=\"alert is-helpful\">\n *\n * It's strongly recommended to enable\n * [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) for applications that use\n * Server-Side Rendering for better performance and compatibility. To enable `fetch`, add\n * `withFetch()` feature to the `provideHttpClient()` call at the root of the application:\n *\n * ```\n * provideHttpClient(withFetch());\n * ```\n *\n * </div>\n *\n * @see {@link withInterceptors}\n * @see {@link withInterceptorsFromDi}\n * @see {@link withXsrfConfiguration}\n * @see {@link withNoXsrfProtection}\n * @see {@link withJsonpSupport}\n * @see {@link withRequestsMadeViaParent}\n * @see {@link withFetch}\n */\nfunction provideHttpClient(...features) {\n    if (ngDevMode) {\n        const featureKinds = new Set(features.map((f) => f.ɵkind));\n        if (featureKinds.has(HttpFeatureKind.NoXsrfProtection) &&\n            featureKinds.has(HttpFeatureKind.CustomXsrfConfiguration)) {\n            throw new Error(ngDevMode\n                ? `Configuration error: found both withXsrfConfiguration() and withNoXsrfProtection() in the same call to provideHttpClient(), which is a contradiction.`\n                : '');\n        }\n    }\n    const providers = [\n        HttpClient,\n        HttpXhrBackend,\n        HttpInterceptorHandler,\n        { provide: HttpHandler, useExisting: HttpInterceptorHandler },\n        {\n            provide: HttpBackend,\n            useFactory: () => {\n                return inject(FetchBackend, { optional: true }) ?? inject(HttpXhrBackend);\n            },\n        },\n        {\n            provide: HTTP_INTERCEPTOR_FNS,\n            useValue: xsrfInterceptorFn,\n            multi: true,\n        },\n        { provide: XSRF_ENABLED, useValue: true },\n        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n    ];\n    for (const feature of features) {\n        providers.push(...feature.ɵproviders);\n    }\n    return makeEnvironmentProviders(providers);\n}\n/**\n * Adds one or more functional-style HTTP interceptors to the configuration of the `HttpClient`\n * instance.\n *\n * @see {@link HttpInterceptorFn}\n * @see {@link provideHttpClient}\n * @publicApi\n */\nfunction withInterceptors(interceptorFns) {\n    return makeHttpFeature(HttpFeatureKind.Interceptors, interceptorFns.map((interceptorFn) => {\n        return {\n            provide: HTTP_INTERCEPTOR_FNS,\n            useValue: interceptorFn,\n            multi: true,\n        };\n    }));\n}\nconst LEGACY_INTERCEPTOR_FN = new InjectionToken(ngDevMode ? 'LEGACY_INTERCEPTOR_FN' : '');\n/**\n * Includes class-based interceptors configured using a multi-provider in the current injector into\n * the configured `HttpClient` instance.\n *\n * Prefer `withInterceptors` and functional interceptors instead, as support for DI-provided\n * interceptors may be phased out in a later release.\n *\n * @see {@link HttpInterceptor}\n * @see {@link HTTP_INTERCEPTORS}\n * @see {@link provideHttpClient}\n */\nfunction withInterceptorsFromDi() {\n    // Note: the legacy interceptor function is provided here via an intermediate token\n    // (`LEGACY_INTERCEPTOR_FN`), using a pattern which guarantees that if these providers are\n    // included multiple times, all of the multi-provider entries will have the same instance of the\n    // interceptor function. That way, the `HttpINterceptorHandler` will dedup them and legacy\n    // interceptors will not run multiple times.\n    return makeHttpFeature(HttpFeatureKind.LegacyInterceptors, [\n        {\n            provide: LEGACY_INTERCEPTOR_FN,\n            useFactory: legacyInterceptorFnFactory,\n        },\n        {\n            provide: HTTP_INTERCEPTOR_FNS,\n            useExisting: LEGACY_INTERCEPTOR_FN,\n            multi: true,\n        },\n    ]);\n}\n/**\n * Customizes the XSRF protection for the configuration of the current `HttpClient` instance.\n *\n * This feature is incompatible with the `withNoXsrfProtection` feature.\n *\n * @see {@link provideHttpClient}\n */\nfunction withXsrfConfiguration({ cookieName, headerName, }) {\n    const providers = [];\n    if (cookieName !== undefined) {\n        providers.push({ provide: XSRF_COOKIE_NAME, useValue: cookieName });\n    }\n    if (headerName !== undefined) {\n        providers.push({ provide: XSRF_HEADER_NAME, useValue: headerName });\n    }\n    return makeHttpFeature(HttpFeatureKind.CustomXsrfConfiguration, providers);\n}\n/**\n * Disables XSRF protection in the configuration of the current `HttpClient` instance.\n *\n * This feature is incompatible with the `withXsrfConfiguration` feature.\n *\n * @see {@link provideHttpClient}\n */\nfunction withNoXsrfProtection() {\n    return makeHttpFeature(HttpFeatureKind.NoXsrfProtection, [\n        {\n            provide: XSRF_ENABLED,\n            useValue: false,\n        },\n    ]);\n}\n/**\n * Add JSONP support to the configuration of the current `HttpClient` instance.\n *\n * @see {@link provideHttpClient}\n */\nfunction withJsonpSupport() {\n    return makeHttpFeature(HttpFeatureKind.JsonpSupport, [\n        JsonpClientBackend,\n        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n        { provide: HTTP_INTERCEPTOR_FNS, useValue: jsonpInterceptorFn, multi: true },\n    ]);\n}\n/**\n * Configures the current `HttpClient` instance to make requests via the parent injector's\n * `HttpClient` instead of directly.\n *\n * By default, `provideHttpClient` configures `HttpClient` in its injector to be an independent\n * instance. For example, even if `HttpClient` is configured in the parent injector with\n * one or more interceptors, they will not intercept requests made via this instance.\n *\n * With this option enabled, once the request has passed through the current injector's\n * interceptors, it will be delegated to the parent injector's `HttpClient` chain instead of\n * dispatched directly, and interceptors in the parent configuration will be applied to the request.\n *\n * If there are several `HttpClient` instances in the injector hierarchy, it's possible for\n * `withRequestsMadeViaParent` to be used at multiple levels, which will cause the request to\n * \"bubble up\" until either reaching the root level or an `HttpClient` which was not configured with\n * this option.\n *\n * @see {@link provideHttpClient}\n * @developerPreview\n */\nfunction withRequestsMadeViaParent() {\n    return makeHttpFeature(HttpFeatureKind.RequestsMadeViaParent, [\n        {\n            provide: HttpBackend,\n            useFactory: () => {\n                const handlerFromParent = inject(HttpHandler, { skipSelf: true, optional: true });\n                if (ngDevMode && handlerFromParent === null) {\n                    throw new Error('withRequestsMadeViaParent() can only be used when the parent injector also configures HttpClient');\n                }\n                return handlerFromParent;\n            },\n        },\n    ]);\n}\n/**\n * Configures the current `HttpClient` instance to make requests using the fetch API.\n *\n * Note: The Fetch API doesn't support progress report on uploads.\n *\n * @publicApi\n */\nfunction withFetch() {\n    return makeHttpFeature(HttpFeatureKind.Fetch, [\n        FetchBackend,\n        { provide: HttpBackend, useExisting: FetchBackend },\n    ]);\n}\n\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * @publicApi\n * @deprecated Use withXsrfConfiguration({cookieName: 'XSRF-TOKEN', headerName: 'X-XSRF-TOKEN'}) as\n *     providers instead or `withNoXsrfProtection` if you want to disabled XSRF protection.\n */\nclass HttpClientXsrfModule {\n    /**\n     * Disable the default XSRF protection.\n     */\n    static disable() {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [withNoXsrfProtection().ɵproviders],\n        };\n    }\n    /**\n     * Configure XSRF protection.\n     * @param options An object that can specify either or both\n     * cookie name or header name.\n     * - Cookie name default is `XSRF-TOKEN`.\n     * - Header name default is `X-XSRF-TOKEN`.\n     *\n     */\n    static withOptions(options = {}) {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: withXsrfConfiguration(options).ɵproviders,\n        };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: HttpClientXsrfModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.8\", ngImport: i0, type: HttpClientXsrfModule }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: HttpClientXsrfModule, providers: [\n            HttpXsrfInterceptor,\n            { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n            { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n            withXsrfConfiguration({\n                cookieName: XSRF_DEFAULT_COOKIE_NAME,\n                headerName: XSRF_DEFAULT_HEADER_NAME,\n            }).ɵproviders,\n            { provide: XSRF_ENABLED, useValue: true },\n        ] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: HttpClientXsrfModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        HttpXsrfInterceptor,\n                        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n                        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n                        withXsrfConfiguration({\n                            cookieName: XSRF_DEFAULT_COOKIE_NAME,\n                            headerName: XSRF_DEFAULT_HEADER_NAME,\n                        }).ɵproviders,\n                        { provide: XSRF_ENABLED, useValue: true },\n                    ],\n                }]\n        }] });\n/**\n * Configures the dependency injector for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in DI token `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n * @deprecated use `provideHttpClient(withInterceptorsFromDi())` as providers instead\n */\nclass HttpClientModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: HttpClientModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.8\", ngImport: i0, type: HttpClientModule }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: HttpClientModule, providers: [provideHttpClient(withInterceptorsFromDi())] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: HttpClientModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    /**\n                     * Configures the dependency injector where it is imported\n                     * with supporting services for HTTP communications.\n                     */\n                    providers: [provideHttpClient(withInterceptorsFromDi())],\n                }]\n        }] });\n/**\n * Configures the dependency injector for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * @publicApi\n * @deprecated `withJsonpSupport()` as providers instead\n */\nclass HttpClientJsonpModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: HttpClientJsonpModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.8\", ngImport: i0, type: HttpClientJsonpModule }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: HttpClientJsonpModule, providers: [withJsonpSupport().ɵproviders] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.8\", ngImport: i0, type: HttpClientJsonpModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [withJsonpSupport().ɵproviders],\n                }]\n        }] });\n\n/**\n * If your application uses different HTTP origins to make API calls (via `HttpClient`) on the server and\n * on the client, the `HTTP_TRANSFER_CACHE_ORIGIN_MAP` token allows you to establish a mapping\n * between those origins, so that `HttpTransferCache` feature can recognize those requests as the same\n * ones and reuse the data cached on the server during hydration on the client.\n *\n * **Important note**: the `HTTP_TRANSFER_CACHE_ORIGIN_MAP` token should *only* be provided in\n * the *server* code of your application (typically in the `app.server.config.ts` script). Angular throws an\n * error if it detects that the token is defined while running on the client.\n *\n * @usageNotes\n *\n * When the same API endpoint is accessed via `http://internal-domain.com:8080` on the server and\n * via `https://external-domain.com` on the client, you can use the following configuration:\n * ```typescript\n * // in app.server.config.ts\n * {\n *     provide: HTTP_TRANSFER_CACHE_ORIGIN_MAP,\n *     useValue: {\n *         'http://internal-domain.com:8080': 'https://external-domain.com'\n *     }\n * }\n * ```\n *\n * @publicApi\n */\nconst HTTP_TRANSFER_CACHE_ORIGIN_MAP = new InjectionToken(ngDevMode ? 'HTTP_TRANSFER_CACHE_ORIGIN_MAP' : '');\n/**\n * Keys within cached response data structure.\n */\nconst BODY = 'b';\nconst HEADERS = 'h';\nconst STATUS = 's';\nconst STATUS_TEXT = 'st';\nconst REQ_URL = 'u';\nconst RESPONSE_TYPE = 'rt';\nconst CACHE_OPTIONS = new InjectionToken(ngDevMode ? 'HTTP_TRANSFER_STATE_CACHE_OPTIONS' : '');\n/**\n * A list of allowed HTTP methods to cache.\n */\nconst ALLOWED_METHODS = ['GET', 'HEAD'];\nfunction transferCacheInterceptorFn(req, next) {\n    const { isCacheActive, ...globalOptions } = inject(CACHE_OPTIONS);\n    const { transferCache: requestOptions, method: requestMethod } = req;\n    // In the following situations we do not want to cache the request\n    if (!isCacheActive ||\n        requestOptions === false ||\n        // POST requests are allowed either globally or at request level\n        (requestMethod === 'POST' && !globalOptions.includePostRequests && !requestOptions) ||\n        (requestMethod !== 'POST' && !ALLOWED_METHODS.includes(requestMethod)) ||\n        // Do not cache request that require authorization when includeRequestsWithAuthHeaders is falsey\n        (!globalOptions.includeRequestsWithAuthHeaders && hasAuthHeaders(req)) ||\n        globalOptions.filter?.(req) === false) {\n        return next(req);\n    }\n    const transferState = inject(TransferState);\n    const originMap = inject(HTTP_TRANSFER_CACHE_ORIGIN_MAP, {\n        optional: true,\n    });\n    const isServer = isPlatformServer(inject(PLATFORM_ID));\n    if (originMap && !isServer) {\n        throw new ɵRuntimeError(2803 /* RuntimeErrorCode.HTTP_ORIGIN_MAP_USED_IN_CLIENT */, ngDevMode &&\n            'Angular detected that the `HTTP_TRANSFER_CACHE_ORIGIN_MAP` token is configured and ' +\n                'present in the client side code. Please ensure that this token is only provided in the ' +\n                'server code of the application.');\n    }\n    const requestUrl = isServer && originMap ? mapRequestOriginUrl(req.url, originMap) : req.url;\n    const storeKey = makeCacheKey(req, requestUrl);\n    const response = transferState.get(storeKey, null);\n    let headersToInclude = globalOptions.includeHeaders;\n    if (typeof requestOptions === 'object' && requestOptions.includeHeaders) {\n        // Request-specific config takes precedence over the global config.\n        headersToInclude = requestOptions.includeHeaders;\n    }\n    if (response) {\n        const { [BODY]: undecodedBody, [RESPONSE_TYPE]: responseType, [HEADERS]: httpHeaders, [STATUS]: status, [STATUS_TEXT]: statusText, [REQ_URL]: url, } = response;\n        // Request found in cache. Respond using it.\n        let body = undecodedBody;\n        switch (responseType) {\n            case 'arraybuffer':\n                body = new TextEncoder().encode(undecodedBody).buffer;\n                break;\n            case 'blob':\n                body = new Blob([undecodedBody]);\n                break;\n        }\n        // We want to warn users accessing a header provided from the cache\n        // That HttpTransferCache alters the headers\n        // The warning will be logged a single time by HttpHeaders instance\n        let headers = new HttpHeaders(httpHeaders);\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            // Append extra logic in dev mode to produce a warning when a header\n            // that was not transferred to the client is accessed in the code via `get`\n            // and `has` calls.\n            headers = appendMissingHeadersDetection(req.url, headers, headersToInclude ?? []);\n        }\n        return of(new HttpResponse({\n            body,\n            headers,\n            status,\n            statusText,\n            url,\n        }));\n    }\n    // Request not found in cache. Make the request and cache it if on the server.\n    return next(req).pipe(tap((event) => {\n        if (event instanceof HttpResponse && isServer) {\n            transferState.set(storeKey, {\n                [BODY]: event.body,\n                [HEADERS]: getFilteredHeaders(event.headers, headersToInclude),\n                [STATUS]: event.status,\n                [STATUS_TEXT]: event.statusText,\n                [REQ_URL]: requestUrl,\n                [RESPONSE_TYPE]: req.responseType,\n            });\n        }\n    }));\n}\n/** @returns true when the requests contains autorization related headers. */\nfunction hasAuthHeaders(req) {\n    return req.headers.has('authorization') || req.headers.has('proxy-authorization');\n}\nfunction getFilteredHeaders(headers, includeHeaders) {\n    if (!includeHeaders) {\n        return {};\n    }\n    const headersMap = {};\n    for (const key of includeHeaders) {\n        const values = headers.getAll(key);\n        if (values !== null) {\n            headersMap[key] = values;\n        }\n    }\n    return headersMap;\n}\nfunction sortAndConcatParams(params) {\n    return [...params.keys()]\n        .sort()\n        .map((k) => `${k}=${params.getAll(k)}`)\n        .join('&');\n}\nfunction makeCacheKey(request, mappedRequestUrl) {\n    // make the params encoded same as a url so it's easy to identify\n    const { params, method, responseType } = request;\n    const encodedParams = sortAndConcatParams(params);\n    let serializedBody = request.serializeBody();\n    if (serializedBody instanceof URLSearchParams) {\n        serializedBody = sortAndConcatParams(serializedBody);\n    }\n    else if (typeof serializedBody !== 'string') {\n        serializedBody = '';\n    }\n    const key = [method, responseType, mappedRequestUrl, serializedBody, encodedParams].join('|');\n    const hash = generateHash(key);\n    return makeStateKey(hash);\n}\n/**\n * A method that returns a hash representation of a string using a variant of DJB2 hash\n * algorithm.\n *\n * This is the same hashing logic that is used to generate component ids.\n */\nfunction generateHash(value) {\n    let hash = 0;\n    for (const char of value) {\n        hash = (Math.imul(31, hash) + char.charCodeAt(0)) << 0;\n    }\n    // Force positive number hash.\n    // 2147483647 = equivalent of Integer.MAX_VALUE.\n    hash += 2147483647 + 1;\n    return hash.toString();\n}\n/**\n * Returns the DI providers needed to enable HTTP transfer cache.\n *\n * By default, when using server rendering, requests are performed twice: once on the server and\n * other one on the browser.\n *\n * When these providers are added, requests performed on the server are cached and reused during the\n * bootstrapping of the application in the browser thus avoiding duplicate requests and reducing\n * load time.\n *\n */\nfunction withHttpTransferCache(cacheOptions) {\n    return [\n        {\n            provide: CACHE_OPTIONS,\n            useFactory: () => {\n                ɵperformanceMarkFeature('NgHttpTransferCache');\n                return { isCacheActive: true, ...cacheOptions };\n            },\n        },\n        {\n            provide: HTTP_ROOT_INTERCEPTOR_FNS,\n            useValue: transferCacheInterceptorFn,\n            multi: true,\n            deps: [TransferState, CACHE_OPTIONS],\n        },\n        {\n            provide: APP_BOOTSTRAP_LISTENER,\n            multi: true,\n            useFactory: () => {\n                const appRef = inject(ApplicationRef);\n                const cacheState = inject(CACHE_OPTIONS);\n                return () => {\n                    ɵwhenStable(appRef).then(() => {\n                        cacheState.isCacheActive = false;\n                    });\n                };\n            },\n        },\n    ];\n}\n/**\n * This function will add a proxy to an HttpHeader to intercept calls to get/has\n * and log a warning if the header entry requested has been removed\n */\nfunction appendMissingHeadersDetection(url, headers, headersToInclude) {\n    const warningProduced = new Set();\n    return new Proxy(headers, {\n        get(target, prop) {\n            const value = Reflect.get(target, prop);\n            const methods = new Set(['get', 'has', 'getAll']);\n            if (typeof value !== 'function' || !methods.has(prop)) {\n                return value;\n            }\n            return (headerName) => {\n                // We log when the key has been removed and a warning hasn't been produced for the header\n                const key = (prop + ':' + headerName).toLowerCase(); // e.g. `get:cache-control`\n                if (!headersToInclude.includes(headerName) && !warningProduced.has(key)) {\n                    warningProduced.add(key);\n                    const truncatedUrl = ɵtruncateMiddle(url);\n                    // TODO: create Error guide for this warning\n                    console.warn(ɵformatRuntimeError(2802 /* RuntimeErrorCode.HEADERS_ALTERED_BY_TRANSFER_CACHE */, `Angular detected that the \\`${headerName}\\` header is accessed, but the value of the header ` +\n                        `was not transferred from the server to the client by the HttpTransferCache. ` +\n                        `To include the value of the \\`${headerName}\\` header for the \\`${truncatedUrl}\\` request, ` +\n                        `use the \\`includeHeaders\\` list. The \\`includeHeaders\\` can be defined either ` +\n                        `on a request level by adding the \\`transferCache\\` parameter, or on an application ` +\n                        `level by adding the \\`httpCacheTransfer.includeHeaders\\` argument to the ` +\n                        `\\`provideClientHydration()\\` call. `));\n                }\n                // invoking the original method\n                return value.apply(target, [headerName]);\n            };\n        },\n    });\n}\nfunction mapRequestOriginUrl(url, originMap) {\n    const origin = new URL(url, 'resolve://').origin;\n    const mappedOrigin = originMap[origin];\n    if (!mappedOrigin) {\n        return url;\n    }\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        verifyMappedOrigin(mappedOrigin);\n    }\n    return url.replace(origin, mappedOrigin);\n}\nfunction verifyMappedOrigin(url) {\n    if (new URL(url, 'resolve://').pathname !== '/') {\n        throw new ɵRuntimeError(2804 /* RuntimeErrorCode.HTTP_ORIGIN_MAP_CONTAINS_PATH */, 'Angular detected a URL with a path segment in the value provided for the ' +\n            `\\`HTTP_TRANSFER_CACHE_ORIGIN_MAP\\` token: ${url}. The map should only contain origins ` +\n            'without any other segments.');\n    }\n}\n\n// This file is not used to build this module. It is only used during editing\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { FetchBackend, HTTP_INTERCEPTORS, HTTP_TRANSFER_CACHE_ORIGIN_MAP, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpContext, HttpContextToken, HttpErrorResponse, HttpEventType, HttpFeatureKind, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpStatusCode, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, provideHttpClient, withFetch, withInterceptors, withInterceptorsFromDi, withJsonpSupport, withNoXsrfProtection, withRequestsMadeViaParent, withXsrfConfiguration, HTTP_ROOT_INTERCEPTOR_FNS as ɵHTTP_ROOT_INTERCEPTOR_FNS, HttpInterceptorHandler as ɵHttpInterceptingHandler, HttpInterceptorHandler as ɵHttpInterceptorHandler, REQUESTS_CONTRIBUTE_TO_STABILITY as ɵREQUESTS_CONTRIBUTE_TO_STABILITY, withHttpTransferCache as ɵwithHttpTransferCache };\n","function asyncGeneratorStep(n, t, e, r, o, a, c) {\n  try {\n    var i = n[a](c),\n      u = i.value;\n  } catch (n) {\n    return void e(n);\n  }\n  i.done ? t(u) : Promise.resolve(u).then(r, o);\n}\nfunction _asyncToGenerator(n) {\n  return function () {\n    var t = this,\n      e = arguments;\n    return new Promise(function (r, o) {\n      var a = n.apply(t, e);\n      function _next(n) {\n        asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n);\n      }\n      function _throw(n) {\n        asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n);\n      }\n      _next(void 0);\n    });\n  };\n}\nexport { _asyncToGenerator as default };"],"names":["mergeMap","isFunction","concatMap","project","resultSelector","operate","createOperatorSubscriber","filter","predicate","thisArg","source","subscriber","index","subscribe","value","call","next","finalize","callback","add","map","innerFrom","executeSchedule","mergeInternals","concurrent","onBeforeNext","expand","innerSubScheduler","additionalFinalizer","buffer","active","isComplete","checkComplete","length","complete","outerNext","doInnerSub","push","innerComplete","innerValue","undefined","bufferedValue","shift","err","error","Infinity","a","i","b","ii","switchMap","innerSubscriber","unsubscribe","innerIndex","outerIndex","identity","tap","observerOrNext","tapObserver","_a","isUnsub","_b","i0","Injectable","inject","NgZone","runInInjectionContext","InjectionToken","ɵPendingTasks","PLATFORM_ID","ɵConsole","ɵformatRuntimeError","Inject","ɵRuntimeError","makeEnvironmentProviders","NgModule","TransferState","makeStateKey","ɵperformanceMarkFeature","APP_BOOTSTRAP_LISTENER","ApplicationRef","ɵwhenStable","ɵtruncateMiddle","of","Observable","from","i1","isPlatformServer","DOCUMENT","ɵparseCookieValue","HttpHandler","HttpBackend","HttpHeaders","constructor","headers","normalizedNames","Map","lazyUpdate","lazyInit","split","forEach","line","indexOf","name","slice","key","toLowerCase","trim","maybeSetNormalizedName","has","get","set","Headers","values","setHeaderEntries","ngDevMode","assertValidHeaders","Object","entries","init","keys","Array","getAll","append","clone","op","delete","lcName","copyFrom","update","applyUpdate","other","concat","base","toDelete","existing","headerValues","isArray","toString","fn","Error","HttpUrlEncodingCodec","encodeKey","standardEncoding","encodeValue","decodeKey","decodeURIComponent","decodeValue","paramParser","rawParams","codec","params","replace","param","eqIdx","val","list","STANDARD_ENCODING_REGEX","STANDARD_ENCODING_REPLACEMENTS","v","encodeURIComponent","s","t","valueToString","HttpParams","options","updates","cloneFrom","encoder","fromString","fromObject","res","appendAll","_value","eKey","join","idx","splice","HttpContextToken","defaultValue","HttpContext","token","mightHaveBody","method","isArrayBuffer","ArrayBuffer","isBlob","Blob","isFormData","FormData","isUrlSearchParams","URLSearchParams","HttpRequest","url","third","fourth","body","reportProgress","withCredentials","responseType","toUpperCase","context","transferCache","urlWithParams","qIdx","sep","serializeBody","JSON","stringify","detectContentTypeHeader","type","setHeaders","reduce","setParams","HttpEventType","HttpResponseBase","defaultStatus","defaultStatusText","status","statusText","ok","HttpHeaderResponse","ResponseHeader","HttpResponse","Response","HttpErrorResponse","message","HTTP_STATUS_CODE_OK","HTTP_STATUS_CODE_NO_CONTENT","HttpStatusCode","addBody","observe","HttpClient","handler","request","first","req","events$","pipe","handle","res$","event","head","jsonp","callbackParam","patch","post","put","ɵfac","HttpClient_Factory","__ngFactoryType__","ɵɵinject","ɵprov","ɵɵdefineInjectable","factory","XSSI_PREFIX$1","REQUEST_URL_HEADER","getResponseUrl$1","response","xRequestUrl","toLocaleLowerCase","FetchBackend","fetchImpl","FetchFactory","optional","fetch","args","globalThis","ngZone","observer","aborter","AbortController","doRequest","signal","then","noop","abort","_this","_asyncToGenerator","createRequestInit","fetchPromise","runOutsideAngular","silenceSuperfluousUnhandledPromiseRejection","Sent","contentLength","chunks","reader","getReader","receivedLength","decoder","partialText","reqZone","Zone","current","done","read","TextDecoder","decode","stream","DownloadProgress","total","loaded","run","chunksAll","concatChunks","contentType","parseBody","binContent","text","parse","credentials","detectedType","totalLength","Uint8Array","position","chunk","FetchBackend_Factory","promise","interceptorChainEndFn","finalHandlerFn","adaptLegacyInterceptorToChain","chainTailFn","interceptor","initialRequest","intercept","downstreamRequest","chainedInterceptorFn","interceptorFn","injector","HTTP_INTERCEPTORS","HTTP_INTERCEPTOR_FNS","HTTP_ROOT_INTERCEPTOR_FNS","REQUESTS_CONTRIBUTE_TO_STABILITY","providedIn","legacyInterceptorFnFactory","chain","interceptors","reduceRight","pendingTasks","contributeToStability","taskId","remove","fetchBackendWarningDisplayed","resetFetchBackendWarningFlag","HttpInterceptorHandler","backend","isServer","warn","dedupedInterceptorFns","Set","nextSequencedFn","HttpInterceptorHandler_Factory","EnvironmentInjector","nextRequestId","foreignDocument","JSONP_ERR_NO_CALLBACK","JSONP_ERR_WRONG_METHOD","JSONP_ERR_WRONG_RESPONSE_TYPE","JSONP_ERR_HEADERS_NOT_SUPPORTED","JsonpCallbackContext","jsonpCallbackContext","window","JsonpClientBackend","callbackMap","document","resolvedPromise","Promise","resolve","nextCallback","node","createElement","src","finished","data","cleanup","removeEventListener","onLoad","onError","addEventListener","appendChild","removeListeners","script","implementation","createHTMLDocument","adoptNode","JsonpClientBackend_Factory","jsonpInterceptorFn","JsonpInterceptor","JsonpInterceptor_Factory","XSSI_PREFIX","getResponseUrl","xhr","responseURL","test","getAllResponseHeaders","getResponseHeader","HttpXhrBackend","xhrFactory","ɵloadImpl","build","open","setRequestHeader","reqBody","headerResponse","partialFromXhr","responseText","originalBody","sentHeaders","onDownProgress","progressEvent","lengthComputable","onUpProgress","progress","UploadProgress","upload","send","readyState","DONE","HttpXhrBackend_Factory","XhrFactory","XSRF_ENABLED","XSRF_DEFAULT_COOKIE_NAME","XSRF_COOKIE_NAME","XSRF_DEFAULT_HEADER_NAME","XSRF_HEADER_NAME","HttpXsrfTokenExtractor","HttpXsrfCookieExtractor","doc","platform","cookieName","lastCookieString","lastToken","parseCount","getToken","cookieString","cookie","HttpXsrfCookieExtractor_Factory","xsrfInterceptorFn","lcUrl","startsWith","headerName","HttpXsrfInterceptor","HttpXsrfInterceptor_Factory","HttpFeatureKind","makeHttpFeature","kind","providers","ɵkind","ɵproviders","provideHttpClient","features","featureKinds","f","NoXsrfProtection","CustomXsrfConfiguration","provide","useExisting","useFactory","useValue","multi","useClass","feature","withInterceptors","interceptorFns","Interceptors","LEGACY_INTERCEPTOR_FN","withInterceptorsFromDi","LegacyInterceptors","withXsrfConfiguration","withNoXsrfProtection","withJsonpSupport","JsonpSupport","withRequestsMadeViaParent","RequestsMadeViaParent","handlerFromParent","skipSelf","withFetch","Fetch","HttpClientXsrfModule","disable","ngModule","withOptions","HttpClientXsrfModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","HttpClientModule","HttpClientModule_Factory","HttpClientJsonpModule","HttpClientJsonpModule_Factory","HTTP_TRANSFER_CACHE_ORIGIN_MAP","BODY","HEADERS","STATUS","STATUS_TEXT","REQ_URL","RESPONSE_TYPE","CACHE_OPTIONS","ALLOWED_METHODS","transferCacheInterceptorFn","isCacheActive","globalOptions","requestOptions","requestMethod","includePostRequests","includes","includeRequestsWithAuthHeaders","hasAuthHeaders","transferState","originMap","requestUrl","mapRequestOriginUrl","storeKey","makeCacheKey","headersToInclude","includeHeaders","undecodedBody","httpHeaders","TextEncoder","encode","appendMissingHeadersDetection","getFilteredHeaders","headersMap","sortAndConcatParams","sort","k","mappedRequestUrl","encodedParams","serializedBody","hash","generateHash","char","Math","imul","charCodeAt","withHttpTransferCache","cacheOptions","deps","appRef","cacheState","warningProduced","Proxy","target","prop","Reflect","methods","truncatedUrl","console","apply","origin","URL","mappedOrigin","verifyMappedOrigin","pathname","ɵHTTP_ROOT_INTERCEPTOR_FNS","ɵHttpInterceptingHandler","ɵHttpInterceptorHandler","ɵREQUESTS_CONTRIBUTE_TO_STABILITY","ɵwithHttpTransferCache"],"sourceRoot":"webpack:///","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9]}